
sistemas-microprocessados_projeto-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003594  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036cc  080036cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080036cc  080036cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036cc  080036cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d0  080036d0  000136d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080036d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000010  080036e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080036e4  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083e6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a91  00000000  00000000  0002841f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  00029eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001379c  00000000  00000000  0002af08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007bed  00000000  00000000  0003e6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ba8e  00000000  00000000  00046291  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000215c  00000000  00000000  000b1d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003688 	.word	0x08003688

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003688 	.word	0x08003688

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fd17 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f822 	bl	80031b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fd2f 	bl	8000bfa <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fcf7 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000006c 	.word	0x2000006c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000006c 	.word	0x2000006c

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f002 ffe0 	bl	8003214 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fb8b 	bl	8000970 <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7b1b      	ldrb	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7d1b      	ldrb	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b1b      	ldrb	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 8000318:	4013      	ands	r3, r2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	429a      	cmp	r2, r3
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c8:	2300      	movs	r3, #0
 80003ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d101      	bne.n	80003da <HAL_ADC_Start_IT+0x1a>
 80003d6:	2302      	movs	r3, #2
 80003d8:	e0a0      	b.n	800051c <HAL_ADC_Start_IT+0x15c>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2201      	movs	r2, #1
 80003de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 fa72 	bl	80008cc <ADC_Enable>
 80003e8:	4603      	mov	r3, r0
 80003ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 808f 	bne.w	8000512 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80003fc:	f023 0301 	bic.w	r3, r3, #1
 8000400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a45      	ldr	r2, [pc, #276]	; (8000524 <HAL_ADC_Start_IT+0x164>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d105      	bne.n	800041e <HAL_ADC_Start_IT+0x5e>
 8000412:	4b45      	ldr	r3, [pc, #276]	; (8000528 <HAL_ADC_Start_IT+0x168>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d115      	bne.n	800044a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000422:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000434:	2b00      	cmp	r3, #0
 8000436:	d026      	beq.n	8000486 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000440:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000448:	e01d      	b.n	8000486 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a33      	ldr	r2, [pc, #204]	; (8000528 <HAL_ADC_Start_IT+0x168>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d004      	beq.n	800046a <HAL_ADC_Start_IT+0xaa>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a2f      	ldr	r2, [pc, #188]	; (8000524 <HAL_ADC_Start_IT+0x164>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d10d      	bne.n	8000486 <HAL_ADC_Start_IT+0xc6>
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <HAL_ADC_Start_IT+0x168>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000472:	2b00      	cmp	r3, #0
 8000474:	d007      	beq.n	8000486 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800047e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800048a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800048e:	2b00      	cmp	r3, #0
 8000490:	d006      	beq.n	80004a0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000496:	f023 0206 	bic.w	r2, r3, #6
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
 800049e:	e002      	b.n	80004a6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2200      	movs	r2, #0
 80004aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f06f 0202 	mvn.w	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f042 0220 	orr.w	r2, r2, #32
 80004c6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80004d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80004d6:	d113      	bne.n	8000500 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004dc:	4a11      	ldr	r2, [pc, #68]	; (8000524 <HAL_ADC_Start_IT+0x164>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d105      	bne.n	80004ee <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <HAL_ADC_Start_IT+0x168>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d108      	bne.n	8000500 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	e00c      	b.n	800051a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	689a      	ldr	r2, [r3, #8]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	e003      	b.n	800051a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800051a:	7bfb      	ldrb	r3, [r7, #15]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40012800 	.word	0x40012800
 8000528:	40012400 	.word	0x40012400

0800052c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	2b20      	cmp	r3, #32
 8000558:	d140      	bne.n	80005dc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f003 0302 	and.w	r3, r3, #2
 8000564:	2b02      	cmp	r3, #2
 8000566:	d139      	bne.n	80005dc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800056c:	f003 0310 	and.w	r3, r3, #16
 8000570:	2b00      	cmp	r3, #0
 8000572:	d105      	bne.n	8000580 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000578:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800058a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800058e:	d11d      	bne.n	80005cc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000594:	2b00      	cmp	r3, #0
 8000596:	d119      	bne.n	80005cc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f022 0220 	bic.w	r2, r2, #32
 80005a6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d105      	bne.n	80005cc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c4:	f043 0201 	orr.w	r2, r3, #1
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f002 fcf9 	bl	8002fc4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f06f 0212 	mvn.w	r2, #18
 80005da:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	2b80      	cmp	r3, #128	; 0x80
 80005e8:	d14f      	bne.n	800068a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d148      	bne.n	800068a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005fc:	f003 0310 	and.w	r3, r3, #16
 8000600:	2b00      	cmp	r3, #0
 8000602:	d105      	bne.n	8000610 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000608:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800061a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800061e:	d012      	beq.n	8000646 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800062a:	2b00      	cmp	r3, #0
 800062c:	d125      	bne.n	800067a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000638:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800063c:	d11d      	bne.n	800067a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000642:	2b00      	cmp	r3, #0
 8000644:	d119      	bne.n	800067a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000654:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000672:	f043 0201 	orr.w	r2, r3, #1
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f9b2 	bl	80009e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f06f 020c 	mvn.w	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000694:	2b40      	cmp	r3, #64	; 0x40
 8000696:	d114      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d10d      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f809 	bl	80006ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f06f 0201 	mvn.w	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d101      	bne.n	80006fc <HAL_ADC_ConfigChannel+0x20>
 80006f8:	2302      	movs	r3, #2
 80006fa:	e0dc      	b.n	80008b6 <HAL_ADC_ConfigChannel+0x1da>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	2b06      	cmp	r3, #6
 800070a:	d81c      	bhi.n	8000746 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	685a      	ldr	r2, [r3, #4]
 8000716:	4613      	mov	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	3b05      	subs	r3, #5
 800071e:	221f      	movs	r2, #31
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	4019      	ands	r1, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	4613      	mov	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	3b05      	subs	r3, #5
 8000738:	fa00 f203 	lsl.w	r2, r0, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	430a      	orrs	r2, r1
 8000742:	635a      	str	r2, [r3, #52]	; 0x34
 8000744:	e03c      	b.n	80007c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	2b0c      	cmp	r3, #12
 800074c:	d81c      	bhi.n	8000788 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	3b23      	subs	r3, #35	; 0x23
 8000760:	221f      	movs	r2, #31
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43db      	mvns	r3, r3
 8000768:	4019      	ands	r1, r3
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3b23      	subs	r3, #35	; 0x23
 800077a:	fa00 f203 	lsl.w	r2, r0, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	430a      	orrs	r2, r1
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
 8000786:	e01b      	b.n	80007c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	3b41      	subs	r3, #65	; 0x41
 800079a:	221f      	movs	r2, #31
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	43db      	mvns	r3, r3
 80007a2:	4019      	ands	r1, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	6818      	ldr	r0, [r3, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	3b41      	subs	r3, #65	; 0x41
 80007b4:	fa00 f203 	lsl.w	r2, r0, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	430a      	orrs	r2, r1
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b09      	cmp	r3, #9
 80007c6:	d91c      	bls.n	8000802 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	68d9      	ldr	r1, [r3, #12]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	3b1e      	subs	r3, #30
 80007da:	2207      	movs	r2, #7
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4019      	ands	r1, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	6898      	ldr	r0, [r3, #8]
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	3b1e      	subs	r3, #30
 80007f4:	fa00 f203 	lsl.w	r2, r0, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	430a      	orrs	r2, r1
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	e019      	b.n	8000836 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6919      	ldr	r1, [r3, #16]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4413      	add	r3, r2
 8000812:	2207      	movs	r2, #7
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	43db      	mvns	r3, r3
 800081a:	4019      	ands	r1, r3
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	6898      	ldr	r0, [r3, #8]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	fa00 f203 	lsl.w	r2, r0, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	430a      	orrs	r2, r1
 8000834:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b10      	cmp	r3, #16
 800083c:	d003      	beq.n	8000846 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000842:	2b11      	cmp	r3, #17
 8000844:	d132      	bne.n	80008ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d125      	bne.n	800089c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d126      	bne.n	80008ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800086c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b10      	cmp	r3, #16
 8000874:	d11a      	bne.n	80008ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	0c9a      	lsrs	r2, r3, #18
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800088c:	e002      	b.n	8000894 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3b01      	subs	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f9      	bne.n	800088e <HAL_ADC_ConfigChannel+0x1b2>
 800089a:	e007      	b.n	80008ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a0:	f043 0220 	orr.w	r2, r3, #32
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40012400 	.word	0x40012400
 80008c4:	2000000c 	.word	0x2000000c
 80008c8:	431bde83 	.word	0x431bde83

080008cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d039      	beq.n	800095e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f042 0201 	orr.w	r2, r2, #1
 80008f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <ADC_Enable+0x9c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a1b      	ldr	r2, [pc, #108]	; (800096c <ADC_Enable+0xa0>)
 8000900:	fba2 2303 	umull	r2, r3, r2, r3
 8000904:	0c9b      	lsrs	r3, r3, #18
 8000906:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000908:	e002      	b.n	8000910 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	3b01      	subs	r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f9      	bne.n	800090a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000916:	f7ff fc71 	bl	80001fc <HAL_GetTick>
 800091a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800091c:	e018      	b.n	8000950 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800091e:	f7ff fc6d 	bl	80001fc <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b02      	cmp	r3, #2
 800092a:	d911      	bls.n	8000950 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000930:	f043 0210 	orr.w	r2, r3, #16
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	f043 0201 	orr.w	r2, r3, #1
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e007      	b.n	8000960 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	2b01      	cmp	r3, #1
 800095c:	d1df      	bne.n	800091e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000000c 	.word	0x2000000c
 800096c:	431bde83 	.word	0x431bde83

08000970 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b01      	cmp	r3, #1
 8000988:	d127      	bne.n	80009da <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 0201 	bic.w	r2, r2, #1
 8000998:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800099a:	f7ff fc2f 	bl	80001fc <HAL_GetTick>
 800099e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009a0:	e014      	b.n	80009cc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009a2:	f7ff fc2b 	bl	80001fc <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d90d      	bls.n	80009cc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f043 0210 	orr.w	r2, r3, #16
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c0:	f043 0201 	orr.w	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e007      	b.n	80009dc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d0e3      	beq.n	80009a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
	...

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4906      	ldr	r1, [pc, #24]	; (8000a90 <__NVIC_EnableIRQ+0x34>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff90 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff2d 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff42 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff90 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5f 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff35 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d005      	beq.n	8000c36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e051      	b.n	8000cda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 020e 	bic.w	r2, r2, #14
 8000c44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0201 	bic.w	r2, r2, #1
 8000c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <HAL_DMA_Abort_IT+0xd0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d029      	beq.n	8000cb4 <HAL_DMA_Abort_IT+0xa0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_DMA_Abort_IT+0xd4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d022      	beq.n	8000cb0 <HAL_DMA_Abort_IT+0x9c>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_DMA_Abort_IT+0xd8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d01a      	beq.n	8000caa <HAL_DMA_Abort_IT+0x96>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_DMA_Abort_IT+0xdc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d012      	beq.n	8000ca4 <HAL_DMA_Abort_IT+0x90>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_DMA_Abort_IT+0xe0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00a      	beq.n	8000c9e <HAL_DMA_Abort_IT+0x8a>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <HAL_DMA_Abort_IT+0xe4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d102      	bne.n	8000c98 <HAL_DMA_Abort_IT+0x84>
 8000c92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c96:	e00e      	b.n	8000cb6 <HAL_DMA_Abort_IT+0xa2>
 8000c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c9c:	e00b      	b.n	8000cb6 <HAL_DMA_Abort_IT+0xa2>
 8000c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca2:	e008      	b.n	8000cb6 <HAL_DMA_Abort_IT+0xa2>
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	e005      	b.n	8000cb6 <HAL_DMA_Abort_IT+0xa2>
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	e002      	b.n	8000cb6 <HAL_DMA_Abort_IT+0xa2>
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	e000      	b.n	8000cb6 <HAL_DMA_Abort_IT+0xa2>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_DMA_Abort_IT+0xe8>)
 8000cb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	4798      	blx	r3
    } 
  }
  return status;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40020008 	.word	0x40020008
 8000ce8:	4002001c 	.word	0x4002001c
 8000cec:	40020030 	.word	0x40020030
 8000cf0:	40020044 	.word	0x40020044
 8000cf4:	40020058 	.word	0x40020058
 8000cf8:	4002006c 	.word	0x4002006c
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b08b      	sub	sp, #44	; 0x2c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e127      	b.n	8000f64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d14:	2201      	movs	r2, #1
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f040 8116 	bne.w	8000f5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d034      	beq.n	8000da4 <HAL_GPIO_Init+0xa4>
 8000d3a:	2b12      	cmp	r3, #18
 8000d3c:	d80d      	bhi.n	8000d5a <HAL_GPIO_Init+0x5a>
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d02b      	beq.n	8000d9a <HAL_GPIO_Init+0x9a>
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d804      	bhi.n	8000d50 <HAL_GPIO_Init+0x50>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d031      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d01c      	beq.n	8000d88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d4e:	e048      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d043      	beq.n	8000ddc <HAL_GPIO_Init+0xdc>
 8000d54:	2b11      	cmp	r3, #17
 8000d56:	d01b      	beq.n	8000d90 <HAL_GPIO_Init+0x90>
          break;
 8000d58:	e043      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d5a:	4a89      	ldr	r2, [pc, #548]	; (8000f80 <HAL_GPIO_Init+0x280>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d026      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d60:	4a87      	ldr	r2, [pc, #540]	; (8000f80 <HAL_GPIO_Init+0x280>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d806      	bhi.n	8000d74 <HAL_GPIO_Init+0x74>
 8000d66:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <HAL_GPIO_Init+0x284>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d020      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d6c:	4a86      	ldr	r2, [pc, #536]	; (8000f88 <HAL_GPIO_Init+0x288>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d01d      	beq.n	8000dae <HAL_GPIO_Init+0xae>
          break;
 8000d72:	e036      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d74:	4a85      	ldr	r2, [pc, #532]	; (8000f8c <HAL_GPIO_Init+0x28c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d019      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d7a:	4a85      	ldr	r2, [pc, #532]	; (8000f90 <HAL_GPIO_Init+0x290>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d016      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d80:	4a84      	ldr	r2, [pc, #528]	; (8000f94 <HAL_GPIO_Init+0x294>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d013      	beq.n	8000dae <HAL_GPIO_Init+0xae>
          break;
 8000d86:	e02c      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e028      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	3304      	adds	r3, #4
 8000d96:	623b      	str	r3, [r7, #32]
          break;
 8000d98:	e023      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	3308      	adds	r3, #8
 8000da0:	623b      	str	r3, [r7, #32]
          break;
 8000da2:	e01e      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	330c      	adds	r3, #12
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	e019      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000db6:	2304      	movs	r3, #4
 8000db8:	623b      	str	r3, [r7, #32]
          break;
 8000dba:	e012      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	611a      	str	r2, [r3, #16]
          break;
 8000dce:	e008      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	615a      	str	r2, [r3, #20]
          break;
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
          break;
 8000de0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2bff      	cmp	r3, #255	; 0xff
 8000de6:	d801      	bhi.n	8000dec <HAL_GPIO_Init+0xec>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	e001      	b.n	8000df0 <HAL_GPIO_Init+0xf0>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2bff      	cmp	r3, #255	; 0xff
 8000df6:	d802      	bhi.n	8000dfe <HAL_GPIO_Init+0xfe>
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x104>
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	3b08      	subs	r3, #8
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	401a      	ands	r2, r3
 8000e16:	6a39      	ldr	r1, [r7, #32]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 8096 	beq.w	8000f5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b59      	ldr	r3, [pc, #356]	; (8000f98 <HAL_GPIO_Init+0x298>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <HAL_GPIO_Init+0x298>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b56      	ldr	r3, [pc, #344]	; (8000f98 <HAL_GPIO_Init+0x298>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e4a:	4a54      	ldr	r2, [pc, #336]	; (8000f9c <HAL_GPIO_Init+0x29c>)
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4b      	ldr	r2, [pc, #300]	; (8000fa0 <HAL_GPIO_Init+0x2a0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x19e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <HAL_GPIO_Init+0x2a4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x19a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a49      	ldr	r2, [pc, #292]	; (8000fa8 <HAL_GPIO_Init+0x2a8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x196>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <HAL_GPIO_Init+0x2ac>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x192>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x1a0>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x1a0>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x1a0>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x1a0>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea2:	f002 0203 	and.w	r2, r2, #3
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eb0:	493a      	ldr	r1, [pc, #232]	; (8000f9c <HAL_GPIO_Init+0x29c>)
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4938      	ldr	r1, [pc, #224]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
 8000ed6:	e006      	b.n	8000ee6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ed8:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4933      	ldr	r1, [pc, #204]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d006      	beq.n	8000f00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	492e      	ldr	r1, [pc, #184]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	604b      	str	r3, [r1, #4]
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4929      	ldr	r1, [pc, #164]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	4924      	ldr	r1, [pc, #144]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	608b      	str	r3, [r1, #8]
 8000f26:	e006      	b.n	8000f36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	491f      	ldr	r1, [pc, #124]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	491a      	ldr	r1, [pc, #104]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60cb      	str	r3, [r1, #12]
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	4915      	ldr	r1, [pc, #84]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	3301      	adds	r3, #1
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f47f aed0 	bne.w	8000d14 <HAL_GPIO_Init+0x14>
  }
}
 8000f74:	bf00      	nop
 8000f76:	372c      	adds	r7, #44	; 0x2c
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	10210000 	.word	0x10210000
 8000f84:	10110000 	.word	0x10110000
 8000f88:	10120000 	.word	0x10120000
 8000f8c:	10310000 	.word	0x10310000
 8000f90:	10320000 	.word	0x10320000
 8000f94:	10220000 	.word	0x10220000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40010400 	.word	0x40010400

08000fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e001      	b.n	8000fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff2:	787b      	ldrb	r3, [r7, #1]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ffe:	e003      	b.n	8001008 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	041a      	lsls	r2, r3, #16
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	611a      	str	r2, [r3, #16]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
	...

08001014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f806 	bl	8001044 <HAL_GPIO_EXTI_Callback>
  }
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e26c      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8087 	beq.w	8001186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001078:	4b92      	ldr	r3, [pc, #584]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b04      	cmp	r3, #4
 8001082:	d00c      	beq.n	800109e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001084:	4b8f      	ldr	r3, [pc, #572]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
 8001090:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109e:	4b89      	ldr	r3, [pc, #548]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06c      	beq.n	8001184 <HAL_RCC_OscConfig+0x12c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d168      	bne.n	8001184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e246      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x76>
 80010c0:	4b80      	ldr	r3, [pc, #512]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a7f      	ldr	r2, [pc, #508]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e02e      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x98>
 80010d6:	4b7b      	ldr	r3, [pc, #492]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7a      	ldr	r2, [pc, #488]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b78      	ldr	r3, [pc, #480]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a77      	ldr	r2, [pc, #476]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0xbc>
 80010fa:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a71      	ldr	r2, [pc, #452]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6e      	ldr	r2, [pc, #440]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 8001114:	4b6b      	ldr	r3, [pc, #428]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6a      	ldr	r2, [pc, #424]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a67      	ldr	r2, [pc, #412]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff f862 	bl	80001fc <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff f85e 	bl	80001fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1fa      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xe4>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff f84e 	bl	80001fc <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff f84a 	bl	80001fc <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1e6      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x10c>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001192:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
 80011aa:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1ba      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4939      	ldr	r1, [pc, #228]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e03a      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff f803 	bl	80001fc <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7fe ffff 	bl	80001fc <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e19b      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4927      	ldr	r1, [pc, #156]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7fe ffe2 	bl	80001fc <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123c:	f7fe ffde 	bl	80001fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e17a      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d03a      	beq.n	80012dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d019      	beq.n	80012a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001274:	f7fe ffc2 	bl	80001fc <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127c:	f7fe ffbe 	bl	80001fc <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e15a      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 fada 	bl	8001854 <RCC_Delay>
 80012a0:	e01c      	b.n	80012dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7fe ffa8 	bl	80001fc <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ae:	e00f      	b.n	80012d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7fe ffa4 	bl	80001fc <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d908      	bls.n	80012d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e140      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	42420000 	.word	0x42420000
 80012cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b9e      	ldr	r3, [pc, #632]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e9      	bne.n	80012b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a6 	beq.w	8001436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b97      	ldr	r3, [pc, #604]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10d      	bne.n	8001316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b94      	ldr	r3, [pc, #592]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a93      	ldr	r2, [pc, #588]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b91      	ldr	r3, [pc, #580]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b8e      	ldr	r3, [pc, #568]	; (8001550 <HAL_RCC_OscConfig+0x4f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x4f8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x4f8>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132e:	f7fe ff65 	bl	80001fc <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001336:	f7fe ff61 	bl	80001fc <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0fd      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <HAL_RCC_OscConfig+0x4f8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x312>
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e02d      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x334>
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a75      	ldr	r2, [pc, #468]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	4b73      	ldr	r3, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a72      	ldr	r2, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	e01c      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x356>
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a6c      	ldr	r2, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a69      	ldr	r2, [pc, #420]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e00b      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 80013ae:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a66      	ldr	r2, [pc, #408]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	4b64      	ldr	r3, [pc, #400]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d015      	beq.n	80013fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7fe ff15 	bl	80001fc <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7fe ff11 	bl	80001fc <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0ab      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	4b57      	ldr	r3, [pc, #348]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0ee      	beq.n	80013d6 <HAL_RCC_OscConfig+0x37e>
 80013f8:	e014      	b.n	8001424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7fe feff 	bl	80001fc <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7fe fefb 	bl	80001fc <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e095      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ee      	bne.n	8001402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d105      	bne.n	8001436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142a:	4b48      	ldr	r3, [pc, #288]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a47      	ldr	r2, [pc, #284]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8081 	beq.w	8001542 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d061      	beq.n	8001510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d146      	bne.n	80014e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001454:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <HAL_RCC_OscConfig+0x4fc>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7fe fecf 	bl	80001fc <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7fe fecb 	bl	80001fc <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e067      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	492d      	ldr	r1, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a19      	ldr	r1, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	430b      	orrs	r3, r1
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x4fc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7fe fe9f 	bl	80001fc <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7fe fe9b 	bl	80001fc <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e037      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x46a>
 80014e0:	e02f      	b.n	8001542 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_RCC_OscConfig+0x4fc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7fe fe88 	bl	80001fc <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7fe fe84 	bl	80001fc <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e020      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x498>
 800150e:	e018      	b.n	8001542 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e013      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x4f4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	429a      	cmp	r2, r3
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	42420060 	.word	0x42420060

08001558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0d0      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d910      	bls.n	800159c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b67      	ldr	r3, [pc, #412]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 0207 	bic.w	r2, r3, #7
 8001582:	4965      	ldr	r1, [pc, #404]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b8      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	494d      	ldr	r1, [pc, #308]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d040      	beq.n	8001678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d115      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07f      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e073      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06b      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4936      	ldr	r1, [pc, #216]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001648:	f7fe fdd8 	bl	80001fc <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7fe fdd4 	bl	80001fc <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e053      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d210      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4922      	ldr	r1, [pc, #136]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e032      	b.n	800170e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016e6:	f000 f821 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016ea:	4601      	mov	r1, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	fa21 f303 	lsr.w	r3, r1, r3
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1cc>)
 8001700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1d0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fd36 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000
 800171c:	40021000 	.word	0x40021000
 8001720:	080036b4 	.word	0x080036b4
 8001724:	2000000c 	.word	0x2000000c
 8001728:	20000000 	.word	0x20000000

0800172c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	b490      	push	{r4, r7}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001734:	1d3c      	adds	r4, r7, #4
 8001736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b04      	cmp	r3, #4
 8001764:	d002      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x40>
 8001766:	2b08      	cmp	r3, #8
 8001768:	d003      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x46>
 800176a:	e02d      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800176e:	623b      	str	r3, [r7, #32]
      break;
 8001770:	e02d      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	0c9b      	lsrs	r3, r3, #18
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800177e:	4413      	add	r3, r2
 8001780:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001784:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	0c5b      	lsrs	r3, r3, #17
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800179e:	4413      	add	r3, r2
 80017a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017aa:	fb02 f203 	mul.w	r2, r2, r3
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	e004      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	623b      	str	r3, [r7, #32]
      break;
 80017c6:	e002      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ca:	623b      	str	r3, [r7, #32]
      break;
 80017cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ce:	6a3b      	ldr	r3, [r7, #32]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc90      	pop	{r4, r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	080036a0 	.word	0x080036a0
 80017e0:	080036b0 	.word	0x080036b0
 80017e4:	40021000 	.word	0x40021000
 80017e8:	007a1200 	.word	0x007a1200
 80017ec:	003d0900 	.word	0x003d0900

080017f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <HAL_RCC_GetHCLKFreq+0x10>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	2000000c 	.word	0x2000000c

08001804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001808:	f7ff fff2 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 800180c:	4601      	mov	r1, r0
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	080036c4 	.word	0x080036c4

0800182c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001830:	f7ff ffde 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 8001834:	4601      	mov	r1, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	0adb      	lsrs	r3, r3, #11
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	080036c4 	.word	0x080036c4

08001854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <RCC_Delay+0x34>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <RCC_Delay+0x38>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0a5b      	lsrs	r3, r3, #9
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001870:	bf00      	nop
  }
  while (Delay --);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1e5a      	subs	r2, r3, #1
 8001876:	60fa      	str	r2, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f9      	bne.n	8001870 <RCC_Delay+0x1c>
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000000c 	.word	0x2000000c
 800188c:	10624dd3 	.word	0x10624dd3

08001890 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d07d      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b0:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10d      	bne.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	4a4b      	ldr	r2, [pc, #300]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c6:	61d3      	str	r3, [r2, #28]
 80018c8:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d4:	2301      	movs	r3, #1
 80018d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d118      	bne.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e4:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a42      	ldr	r2, [pc, #264]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f0:	f7fe fc84 	bl	80001fc <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	e008      	b.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f8:	f7fe fc80 	bl	80001fc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e06d      	b.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001916:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800191e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d02e      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d027      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800193e:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001944:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800194a:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d014      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7fe fc4f 	bl	80001fc <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7fe fc4b 	bl	80001fc <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e036      	b.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4917      	ldr	r1, [pc, #92]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001992:	4313      	orrs	r3, r2
 8001994:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	490b      	ldr	r1, [pc, #44]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	4904      	ldr	r1, [pc, #16]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
 80019f8:	42420440 	.word	0x42420440

080019fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e03f      	b.n	8001a8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f001 fc3a 	bl	800329c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fae5 	bl	8002010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d130      	bne.n	8001b12 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_UART_Transmit_IT+0x26>
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e029      	b.n	8001b14 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Transmit_IT+0x38>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e022      	b.n	8001b14 <HAL_UART_Transmit_IT+0x7e>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2221      	movs	r2, #33	; 0x21
 8001af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
  }
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d140      	bne.n	8001bba <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_UART_Receive_IT+0x26>
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e039      	b.n	8001bbc <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_UART_Receive_IT+0x38>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e032      	b.n	8001bbc <HAL_UART_Receive_IT+0x9e>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	88fa      	ldrh	r2, [r7, #6]
 8001b68:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2222      	movs	r2, #34	; 0x22
 8001b7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b94:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695a      	ldr	r2, [r3, #20]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0220 	orr.w	r2, r2, #32
 8001bb4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_UART_IRQHandler+0x52>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f97b 	bl	8001f0e <UART_Receive_IT>
      return;
 8001c18:	e0cc      	b.n	8001db4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80ab 	beq.w	8001d78 <HAL_UART_IRQHandler+0x1b0>
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <HAL_UART_IRQHandler+0x70>
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80a0 	beq.w	8001d78 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_UART_IRQHandler+0x90>
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <HAL_UART_IRQHandler+0xb0>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c70:	f043 0202 	orr.w	r2, r3, #2
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <HAL_UART_IRQHandler+0xd0>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	f043 0204 	orr.w	r2, r3, #4
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_UART_IRQHandler+0xf0>
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	f043 0208 	orr.w	r2, r3, #8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d078      	beq.n	8001db2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_UART_IRQHandler+0x112>
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f91a 	bl	8001f0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <HAL_UART_IRQHandler+0x13a>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d031      	beq.n	8001d66 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f865 	bl	8001dd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d023      	beq.n	8001d5e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695a      	ldr	r2, [r3, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d013      	beq.n	8001d56 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <HAL_UART_IRQHandler+0x1f4>)
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe ff6a 	bl	8000c14 <HAL_DMA_Abort_IT>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d50:	4610      	mov	r0, r2
 8001d52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d54:	e00e      	b.n	8001d74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f832 	bl	8001dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d5c:	e00a      	b.n	8001d74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f82e 	bl	8001dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d64:	e006      	b.n	8001d74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f82a 	bl	8001dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d72:	e01e      	b.n	8001db2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d74:	bf00      	nop
    return;
 8001d76:	e01c      	b.n	8001db2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_UART_IRQHandler+0x1cc>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f851 	bl	8001e34 <UART_Transmit_IT>
    return;
 8001d92:	e00f      	b.n	8001db4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_UART_IRQHandler+0x1ec>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f898 	bl	8001ede <UART_EndTransmit_IT>
    return;
 8001dae:	bf00      	nop
 8001db0:	e000      	b.n	8001db4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001db2:	bf00      	nop
  }
}
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	08001e0d 	.word	0x08001e0d

08001dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001de8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff ffca 	bl	8001dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b21      	cmp	r3, #33	; 0x21
 8001e46:	d144      	bne.n	8001ed2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e50:	d11a      	bne.n	8001e88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	1c9a      	adds	r2, r3, #2
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	621a      	str	r2, [r3, #32]
 8001e7a:	e00e      	b.n	8001e9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	621a      	str	r2, [r3, #32]
 8001e86:	e008      	b.n	8001e9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	1c59      	adds	r1, r3, #1
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6211      	str	r1, [r2, #32]
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10f      	bne.n	8001ece <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ecc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
  }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 ff0c 	bl	8002d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b22      	cmp	r3, #34	; 0x22
 8001f20:	d171      	bne.n	8002006 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2a:	d123      	bne.n	8001f74 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10e      	bne.n	8001f58 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	1c9a      	adds	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
 8001f56:	e029      	b.n	8001fac <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
 8001f72:	e01b      	b.n	8001fac <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6858      	ldr	r0, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6291      	str	r1, [r2, #40]	; 0x28
 8001f8c:	b2c2      	uxtb	r2, r0
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e00c      	b.n	8001fac <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	1c58      	adds	r0, r3, #1
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	6288      	str	r0, [r1, #40]	; 0x28
 8001fa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d120      	bne.n	8002002 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0220 	bic.w	r2, r2, #32
 8001fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fe99 	bl	8002d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e002      	b.n	8002008 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800204a:	f023 030c 	bic.w	r3, r3, #12
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	430b      	orrs	r3, r1
 8002056:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a52      	ldr	r2, [pc, #328]	; (80021bc <UART_SetConfig+0x1ac>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d14e      	bne.n	8002116 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002078:	f7ff fbd8 	bl	800182c <HAL_RCC_GetPCLK2Freq>
 800207c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	009a      	lsls	r2, r3, #2
 8002088:	441a      	add	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	4a4a      	ldr	r2, [pc, #296]	; (80021c0 <UART_SetConfig+0x1b0>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	0119      	lsls	r1, r3, #4
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	009a      	lsls	r2, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b4:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <UART_SetConfig+0x1b0>)
 80020b6:	fba3 0302 	umull	r0, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	fb00 f303 	mul.w	r3, r0, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	3332      	adds	r3, #50	; 0x32
 80020c8:	4a3d      	ldr	r2, [pc, #244]	; (80021c0 <UART_SetConfig+0x1b0>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d4:	4419      	add	r1, r3
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009a      	lsls	r2, r3, #2
 80020e0:	441a      	add	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <UART_SetConfig+0x1b0>)
 80020ee:	fba3 0302 	umull	r0, r3, r3, r2
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2064      	movs	r0, #100	; 0x64
 80020f6:	fb00 f303 	mul.w	r3, r0, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	3332      	adds	r3, #50	; 0x32
 8002100:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <UART_SetConfig+0x1b0>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	440a      	add	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002114:	e04d      	b.n	80021b2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002116:	f7ff fb75 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 800211a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	009a      	lsls	r2, r3, #2
 8002126:	441a      	add	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <UART_SetConfig+0x1b0>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	0119      	lsls	r1, r3, #4
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	009a      	lsls	r2, r3, #2
 8002146:	441a      	add	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <UART_SetConfig+0x1b0>)
 8002154:	fba3 0302 	umull	r0, r3, r3, r2
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	2064      	movs	r0, #100	; 0x64
 800215c:	fb00 f303 	mul.w	r3, r0, r3
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	3332      	adds	r3, #50	; 0x32
 8002166:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <UART_SetConfig+0x1b0>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002172:	4419      	add	r1, r3
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	009a      	lsls	r2, r3, #2
 800217e:	441a      	add	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	fbb2 f2f3 	udiv	r2, r2, r3
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <UART_SetConfig+0x1b0>)
 800218c:	fba3 0302 	umull	r0, r3, r3, r2
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	2064      	movs	r0, #100	; 0x64
 8002194:	fb00 f303 	mul.w	r3, r0, r3
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	3332      	adds	r3, #50	; 0x32
 800219e:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <UART_SetConfig+0x1b0>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	440a      	add	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40013800 	.word	0x40013800
 80021c0:	51eb851f 	.word	0x51eb851f

080021c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08e      	sub	sp, #56	; 0x38
 80021c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	int16_t val7seg = 0x00FF, // inicia 7-seg com 0xF (tudo apagado)
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	86fb      	strh	r3, [r7, #54]	; 0x36
			serial_data = 0x01FF; // dado a serializar (dig | val7seg)
 80021ce:	f240 13ff 	movw	r3, #511	; 0x1ff
 80021d2:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint32_t tIN_varre = 0; // registra tempo última varredura
 80021d4:	2300      	movs	r3, #0
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80021d8:	f7fd ffb8 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80021dc:	f000 fc5a 	bl	8002a94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80021e0:	f000 fd40 	bl	8002c64 <MX_GPIO_Init>
	MX_ADC1_Init();
 80021e4:	f000 fcd6 	bl	8002b94 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80021e8:	f000 fd12 	bl	8002c10 <MX_USART1_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80021ec:	f000 fcad 	bl	8002b4a <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	// inicializa a SPI (pinos 6,9,10 da GPIOB)
	reset_pin_GPIOs();
 80021f0:	f000 ffc6 	bl	8003180 <reset_pin_GPIOs>
	// var de estado que controla a varredura (qual display é mostrado)
	static enum {
		DIG_UNI, DIG_DEC, DIG_CENS, DIG_MILS
	} sttVARRE = DIG_UNI;

	HAL_UART_Receive_IT(&huart1, buffIn, sizeof(buffIn)); // inicializa buffer de entrada
 80021f4:	2204      	movs	r2, #4
 80021f6:	49a0      	ldr	r1, [pc, #640]	; (8002478 <main+0x2b4>)
 80021f8:	48a0      	ldr	r0, [pc, #640]	; (800247c <main+0x2b8>)
 80021fa:	f7ff fc90 	bl	8001b1e <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOB,
 80021fe:	2201      	movs	r2, #1
 8002200:	f24f 0120 	movw	r1, #61472	; 0xf020
 8002204:	489e      	ldr	r0, [pc, #632]	; (8002480 <main+0x2bc>)
 8002206:	f7fe feec 	bl	8000fe2 <HAL_GPIO_WritePin>
	static enum {
		UNI, DEZ
	} sttPonto = DEZ; // var ponto display

	// para controlar vars tempos de entrada na rotina ON/OFF de cada LED
	uint32_t tin_D3 = 0, tin_D4 = 0, tin_D = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24

	// para controlar as vezes que uma requisicao sera feita
	uint32_t tin_UART = 0, timeOut_UART = 0, tin_erro_UART = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]

	// variaveis para contar hora e minuto
	uint8_t MINuni = 0, MINdec = 0, HRuni = 0, HRdec = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
 8002226:	2300      	movs	r3, #0
 8002228:	75bb      	strb	r3, [r7, #22]
 800222a:	2300      	movs	r3, #0
 800222c:	757b      	strb	r3, [r7, #21]
 800222e:	2300      	movs	r3, #0
 8002230:	753b      	strb	r3, [r7, #20]

	// variavel para controlar quandos sera incrementado o minuto
	uint32_t tin_min = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]

	// variavel para controlar quando sera feito o reset do sistema
	uint32_t reset_A3 = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]

	// variavel para verificar quando o borao PA3 esta sendo pressionado
	bool PA3_pressionado = false;
 800223a:	2300      	movs	r3, #0
 800223c:	72fb      	strb	r3, [r7, #11]

	// variavel para controlar quando sera feita a conversao AD
	uint32_t tin_conversor = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]

	// variavel para armazenar o modo de operacao do programa
	int modoDeOperacao = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
		/* USER CODE BEGIN 3 */

		// Botao PA 3 -----------------------------------------------------------
		// atualiza status do programa de acordo com o modo de operacao EditarRelogio, Conversor, ConexaoUART, Reset
		// Verifica se o botao PA3 esta apertado por 3 segundos
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) {
 8002246:	2108      	movs	r1, #8
 8002248:	488e      	ldr	r0, [pc, #568]	; (8002484 <main+0x2c0>)
 800224a:	f7fe feb3 	bl	8000fb4 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d116      	bne.n	8002282 <main+0xbe>
			if (PA3_pressionado == false) { // se PA3 pressionado, salva o tick atual
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <main+0xa6>
				reset_A3 = HAL_GetTick();
 8002260:	f7fd ffcc 	bl	80001fc <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]
				PA3_pressionado = true;
 8002266:	2301      	movs	r3, #1
 8002268:	72fb      	strb	r3, [r7, #11]
			}
			if ((HAL_GetTick() - reset_A3) >= reset_time) { // se passou 3 segundos depois do tick inicial
 800226a:	f7fd ffc7 	bl	80001fc <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002278:	4293      	cmp	r3, r2
 800227a:	d907      	bls.n	800228c <main+0xc8>
				modoDeOperacao = 5; // muda modo de operacao para RESET
 800227c:	2305      	movs	r3, #5
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	e004      	b.n	800228c <main+0xc8>
			}
		} else { // se PA3 nao esta pressionado
			PA3_pressionado = false;
 8002282:	2300      	movs	r3, #0
 8002284:	72fb      	strb	r3, [r7, #11]
			modoDeOperacao = get_modo_oper_programa(); // busca modo de operacao
 8002286:	f001 f943 	bl	8003510 <get_modo_oper_programa>
 800228a:	6038      	str	r0, [r7, #0]
		}

		// switch para definir o modo de operacao do programa
		switch (modoDeOperacao) {
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b05      	cmp	r3, #5
 8002290:	d826      	bhi.n	80022e0 <main+0x11c>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <main+0xd4>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022b1 	.word	0x080022b1
 800229c:	080022b9 	.word	0x080022b9
 80022a0:	080022c1 	.word	0x080022c1
 80022a4:	080022c9 	.word	0x080022c9
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	080022d9 	.word	0x080022d9
		case 0:
			statusPrograma = Relogio;
 80022b0:	4b75      	ldr	r3, [pc, #468]	; (8002488 <main+0x2c4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
			break;
 80022b6:	e013      	b.n	80022e0 <main+0x11c>
		case 1:
			statusPrograma = EditarRelogioHora;
 80022b8:	4b73      	ldr	r3, [pc, #460]	; (8002488 <main+0x2c4>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
			break;
 80022be:	e00f      	b.n	80022e0 <main+0x11c>
		case 2:
			statusPrograma = EditarRelogioMinuto;
 80022c0:	4b71      	ldr	r3, [pc, #452]	; (8002488 <main+0x2c4>)
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]
			break;
 80022c6:	e00b      	b.n	80022e0 <main+0x11c>
		case 3:
			statusPrograma = Conversor;
 80022c8:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <main+0x2c4>)
 80022ca:	2203      	movs	r2, #3
 80022cc:	701a      	strb	r2, [r3, #0]
			break;
 80022ce:	e007      	b.n	80022e0 <main+0x11c>
		case 4:
			statusPrograma = ConexaoUART;
 80022d0:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <main+0x2c4>)
 80022d2:	2204      	movs	r2, #4
 80022d4:	701a      	strb	r2, [r3, #0]
			break;
 80022d6:	e003      	b.n	80022e0 <main+0x11c>
		case 5:
			statusPrograma = Reset;
 80022d8:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <main+0x2c4>)
 80022da:	2205      	movs	r2, #5
 80022dc:	701a      	strb	r2, [r3, #0]
			break;
 80022de:	bf00      	nop
		}

		// --------------------------------------------------------------------------
		// Contador do relogio ------------------------------------------------
		// apenas conta quando nao esta no modo de edicao
		if ((HAL_GetTick() - tin_min) >= min_delay
 80022e0:	f7fd ff8c 	bl	80001fc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b31      	cmp	r3, #49	; 0x31
 80022ec:	d935      	bls.n	800235a <main+0x196>
				&& statusPrograma != EditarRelogioHora
 80022ee:	4b66      	ldr	r3, [pc, #408]	; (8002488 <main+0x2c4>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d030      	beq.n	800235a <main+0x196>
				&& statusPrograma != EditarRelogioMinuto) { //relógio incrementa minutos naturalmente
 80022f8:	4b63      	ldr	r3, [pc, #396]	; (8002488 <main+0x2c4>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d02b      	beq.n	800235a <main+0x196>
			tin_min = HAL_GetTick();
 8002302:	f7fd ff7b 	bl	80001fc <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

			if (MINuni == 9) {
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b09      	cmp	r3, #9
 800230c:	d122      	bne.n	8002354 <main+0x190>
				MINuni = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]
				if (MINdec == 5) {
 8002312:	7dbb      	ldrb	r3, [r7, #22]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d119      	bne.n	800234c <main+0x188>
					MINdec = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	75bb      	strb	r3, [r7, #22]
					if (HRuni == 3 && HRdec == 2) {
 800231c:	7d7b      	ldrb	r3, [r7, #21]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d107      	bne.n	8002332 <main+0x16e>
 8002322:	7d3b      	ldrb	r3, [r7, #20]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d104      	bne.n	8002332 <main+0x16e>
						HRuni = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	757b      	strb	r3, [r7, #21]
						HRdec = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	753b      	strb	r3, [r7, #20]
 8002330:	e013      	b.n	800235a <main+0x196>
					} else if (HRuni == 9) {
 8002332:	7d7b      	ldrb	r3, [r7, #21]
 8002334:	2b09      	cmp	r3, #9
 8002336:	d105      	bne.n	8002344 <main+0x180>
						HRuni = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	757b      	strb	r3, [r7, #21]
						HRdec++;
 800233c:	7d3b      	ldrb	r3, [r7, #20]
 800233e:	3301      	adds	r3, #1
 8002340:	753b      	strb	r3, [r7, #20]
 8002342:	e00a      	b.n	800235a <main+0x196>
					} else
						HRuni++;
 8002344:	7d7b      	ldrb	r3, [r7, #21]
 8002346:	3301      	adds	r3, #1
 8002348:	757b      	strb	r3, [r7, #21]
 800234a:	e006      	b.n	800235a <main+0x196>

				} else
					MINdec++;
 800234c:	7dbb      	ldrb	r3, [r7, #22]
 800234e:	3301      	adds	r3, #1
 8002350:	75bb      	strb	r3, [r7, #22]
 8002352:	e002      	b.n	800235a <main+0x196>
			} else
				MINuni++;
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	3301      	adds	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
		}

		// --------------------------------------------------------------------------
		// Mostra Relogio no Display---------------------------------------------
		if (statusPrograma == Relogio) {
 800235a:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <main+0x2c4>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d116      	bne.n	8002392 <main+0x1ce>
			// atribui as variaveis que serao mostradas no display
			uni = HRdec;
 8002364:	7d3b      	ldrb	r3, [r7, #20]
 8002366:	4a49      	ldr	r2, [pc, #292]	; (800248c <main+0x2c8>)
 8002368:	6013      	str	r3, [r2, #0]
			dez = HRuni;
 800236a:	7d7b      	ldrb	r3, [r7, #21]
 800236c:	4a48      	ldr	r2, [pc, #288]	; (8002490 <main+0x2cc>)
 800236e:	6013      	str	r3, [r2, #0]
			cen = MINdec;
 8002370:	7dbb      	ldrb	r3, [r7, #22]
 8002372:	4a48      	ldr	r2, [pc, #288]	; (8002494 <main+0x2d0>)
 8002374:	6013      	str	r3, [r2, #0]
			mil = MINuni;
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	4a47      	ldr	r2, [pc, #284]	; (8002498 <main+0x2d4>)
 800237a:	6013      	str	r3, [r2, #0]
			sttPonto = DEZ; // coloca o ponto na segunda casa do display
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <main+0x2d8>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
			reset_modo_edicao_hora(); // coloca modo de dedicao de hora para 0
 8002382:	f001 f8ed 	bl	8003560 <reset_modo_edicao_hora>
			HAL_GPIO_WritePin(GPIOB,
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800238c:	483c      	ldr	r0, [pc, #240]	; (8002480 <main+0x2bc>)
 800238e:	f7fe fe28 	bl	8000fe2 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
					GPIO_PIN_SET); // desl LED
		}
// --------------------------------------------------------------------------
// Editar Relogio--------------------------------------------------------
		if (statusPrograma == EditarRelogioHora) {
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <main+0x2c4>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d138      	bne.n	800240e <main+0x24a>
			HAL_GPIO_WritePin(GPIOB,
 800239c:	2201      	movs	r2, #1
 800239e:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80023a2:	4837      	ldr	r0, [pc, #220]	; (8002480 <main+0x2bc>)
 80023a4:	f7fe fe1d 	bl	8000fe2 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET); // desl o LED
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // liga o LED 3
 80023a8:	2200      	movs	r2, #0
 80023aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ae:	4834      	ldr	r0, [pc, #208]	; (8002480 <main+0x2bc>)
 80023b0:	f7fe fe17 	bl	8000fe2 <HAL_GPIO_WritePin>

			// atribui as variaveis que serao mostradas no display
			uni = HRdec;
 80023b4:	7d3b      	ldrb	r3, [r7, #20]
 80023b6:	4a35      	ldr	r2, [pc, #212]	; (800248c <main+0x2c8>)
 80023b8:	6013      	str	r3, [r2, #0]
			dez = HRuni;
 80023ba:	7d7b      	ldrb	r3, [r7, #21]
 80023bc:	4a34      	ldr	r2, [pc, #208]	; (8002490 <main+0x2cc>)
 80023be:	6013      	str	r3, [r2, #0]
			cen = MINdec;
 80023c0:	7dbb      	ldrb	r3, [r7, #22]
 80023c2:	4a34      	ldr	r2, [pc, #208]	; (8002494 <main+0x2d0>)
 80023c4:	6013      	str	r3, [r2, #0]
			mil = MINuni;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	4a33      	ldr	r2, [pc, #204]	; (8002498 <main+0x2d4>)
 80023ca:	6013      	str	r3, [r2, #0]
			sttPonto = DEZ; // coloca o ponto na segunda casa do display
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <main+0x2d8>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]

			if (get_modo_edicao_hora() == 1) {		// PA1 pressionado
 80023d2:	f001 f8b1 	bl	8003538 <get_modo_edicao_hora>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d116      	bne.n	800240a <main+0x246>
				if (HRuni == 3 && HRdec == 2) {	// caso esteja em 23h mudar para 00h
 80023dc:	7d7b      	ldrb	r3, [r7, #21]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d107      	bne.n	80023f2 <main+0x22e>
 80023e2:	7d3b      	ldrb	r3, [r7, #20]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d104      	bne.n	80023f2 <main+0x22e>
					HRuni = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	757b      	strb	r3, [r7, #21]
					HRdec = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	753b      	strb	r3, [r7, #20]
 80023f0:	e00b      	b.n	800240a <main+0x246>
				} else if (HRuni == 9) {
 80023f2:	7d7b      	ldrb	r3, [r7, #21]
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	d105      	bne.n	8002404 <main+0x240>
					HRuni = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	757b      	strb	r3, [r7, #21]
					HRdec++;
 80023fc:	7d3b      	ldrb	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	753b      	strb	r3, [r7, #20]
 8002402:	e002      	b.n	800240a <main+0x246>
				} else
					HRuni++; 	// soma as horas
 8002404:	7d7b      	ldrb	r3, [r7, #21]
 8002406:	3301      	adds	r3, #1
 8002408:	757b      	strb	r3, [r7, #21]
			}
			reset_modo_edicao_hora(); // volta o modo de edicao hora para 0 (este modo indica quando sera incrementado a unidade)
 800240a:	f001 f8a9 	bl	8003560 <reset_modo_edicao_hora>
		}

		// mesma logica que editar a hora
		if (statusPrograma == EditarRelogioMinuto) {
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <main+0x2c4>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d148      	bne.n	80024aa <main+0x2e6>
			HAL_GPIO_WritePin(GPIOB,
 8002418:	2201      	movs	r2, #1
 800241a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800241e:	4818      	ldr	r0, [pc, #96]	; (8002480 <main+0x2bc>)
 8002420:	f7fe fddf 	bl	8000fe2 <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET); // desl o LED
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // liga o LED 4
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800242a:	4815      	ldr	r0, [pc, #84]	; (8002480 <main+0x2bc>)
 800242c:	f7fe fdd9 	bl	8000fe2 <HAL_GPIO_WritePin>

			uni = HRdec;
 8002430:	7d3b      	ldrb	r3, [r7, #20]
 8002432:	4a16      	ldr	r2, [pc, #88]	; (800248c <main+0x2c8>)
 8002434:	6013      	str	r3, [r2, #0]
			dez = HRuni;
 8002436:	7d7b      	ldrb	r3, [r7, #21]
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <main+0x2cc>)
 800243a:	6013      	str	r3, [r2, #0]
			cen = MINdec;
 800243c:	7dbb      	ldrb	r3, [r7, #22]
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <main+0x2d0>)
 8002440:	6013      	str	r3, [r2, #0]
			mil = MINuni;
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <main+0x2d4>)
 8002446:	6013      	str	r3, [r2, #0]
			sttPonto = DEZ;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <main+0x2d8>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]

			if (get_modo_edicao_hora() == 1) {		// PA1 pressionado
 800244e:	f001 f873 	bl	8003538 <get_modo_edicao_hora>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d126      	bne.n	80024a6 <main+0x2e2>
				if (MINuni == 9) {
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b09      	cmp	r3, #9
 800245c:	d120      	bne.n	80024a0 <main+0x2dc>
					MINuni = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]
					if (MINdec == 5)
 8002462:	7dbb      	ldrb	r3, [r7, #22]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d102      	bne.n	800246e <main+0x2aa>
						MINdec = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	75bb      	strb	r3, [r7, #22]
 800246c:	e01b      	b.n	80024a6 <main+0x2e2>
					else
						MINdec++;
 800246e:	7dbb      	ldrb	r3, [r7, #22]
 8002470:	3301      	adds	r3, #1
 8002472:	75bb      	strb	r3, [r7, #22]
 8002474:	e017      	b.n	80024a6 <main+0x2e2>
 8002476:	bf00      	nop
 8002478:	20000034 	.word	0x20000034
 800247c:	200000a0 	.word	0x200000a0
 8002480:	40010c00 	.word	0x40010c00
 8002484:	40010800 	.word	0x40010800
 8002488:	20000050 	.word	0x20000050
 800248c:	2000004c 	.word	0x2000004c
 8002490:	20000048 	.word	0x20000048
 8002494:	20000044 	.word	0x20000044
 8002498:	20000040 	.word	0x20000040
 800249c:	20000008 	.word	0x20000008
				} else
					MINuni++;	// soma os minutos
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	3301      	adds	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
			}
			reset_modo_edicao_hora();
 80024a6:	f001 f85b 	bl	8003560 <reset_modo_edicao_hora>
		}
// --------------------------------------------------------------------------
// Conversor AD----------------------------------------------------------
		// adaptado do programa feito em aula
		if (statusPrograma == Conversor) {
 80024aa:	4b8d      	ldr	r3, [pc, #564]	; (80026e0 <main+0x51c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d11e      	bne.n	80024f2 <main+0x32e>
			sttPonto = UNI;
 80024b4:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <main+0x520>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
			// converte para mVs (decimal, p/ 7-seg)
			if ((HAL_GetTick() - tin_conversor) > DT_UPDATE) {
 80024ba:	f7fd fe9f 	bl	80001fc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2bc8      	cmp	r3, #200	; 0xc8
 80024c6:	d908      	bls.n	80024da <main+0x316>
				tin_conversor = HAL_GetTick();
 80024c8:	f7fd fe98 	bl	80001fc <HAL_GetTick>
 80024cc:	6078      	str	r0, [r7, #4]
				ConverteValorDoConversor(val_adc);
 80024ce:	4b86      	ldr	r3, [pc, #536]	; (80026e8 <main+0x524>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fd07 	bl	8002ee8 <ConverteValorDoConversor>
			}
			HAL_GPIO_WritePin(GPIOB,
 80024da:	2201      	movs	r2, #1
 80024dc:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80024e0:	4882      	ldr	r0, [pc, #520]	; (80026ec <main+0x528>)
 80024e2:	f7fe fd7e 	bl	8000fe2 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET); // desl o LED
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // liga o LED 1
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ec:	487f      	ldr	r0, [pc, #508]	; (80026ec <main+0x528>)
 80024ee:	f7fe fd78 	bl	8000fe2 <HAL_GPIO_WritePin>
		}

		// faz uma conversão ADC
		if ((HAL_GetTick() - tin_conversor) > DT_UPDATE) {
 80024f2:	f7fd fe83 	bl	80001fc <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2bc8      	cmp	r3, #200	; 0xc8
 80024fe:	d902      	bls.n	8002506 <main+0x342>
			// dispara por software uma conversão ADC
			HAL_ADC_Start_IT(&hadc1); // dispara ADC p/ conversão por interrupção
 8002500:	487b      	ldr	r0, [pc, #492]	; (80026f0 <main+0x52c>)
 8002502:	f7fd ff5d 	bl	80003c0 <HAL_ADC_Start_IT>
		}
		// --------------------------------------------------------------------------

		// Atualiza display com o valor de uni, dez, cen e mil -----------------------
		// nao depende do modo de operacao do programa
		if ((HAL_GetTick() - tIN_varre) > DT_VARRE) // se ++0,1s atualiza o display
 8002506:	f7fd fe79 	bl	80001fc <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b05      	cmp	r3, #5
 8002512:	f240 80aa 	bls.w	800266a <main+0x4a6>
		{
			tIN_varre = HAL_GetTick(); // salva tIN p/ prox tempo varredura
 8002516:	f7fd fe71 	bl	80001fc <HAL_GetTick>
 800251a:	6338      	str	r0, [r7, #48]	; 0x30
			switch (sttVARRE) // teste e escolha de qual DIG vai varrer
 800251c:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <main+0x530>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b03      	cmp	r3, #3
 8002522:	f200 8096 	bhi.w	8002652 <main+0x48e>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <main+0x368>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	08002605 	.word	0x08002605
 8002530:	080025ad 	.word	0x080025ad
 8002534:	08002557 	.word	0x08002557
 8002538:	0800253d 	.word	0x0800253d
			{
			case DIG_MILS: {
				sttVARRE = DIG_CENS; // ajusta p/ prox digito
 800253c:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <main+0x530>)
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
				serial_data = 0x0008; // display #1
 8002542:	2308      	movs	r3, #8
 8002544:	86bb      	strh	r3, [r7, #52]	; 0x34
				val7seg = conv_7_seg(mil);
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <main+0x534>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fd5a 	bl	8003004 <conv_7_seg>
 8002550:	4603      	mov	r3, r0
 8002552:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 8002554:	e07d      	b.n	8002652 <main+0x48e>
			}
			case DIG_CENS: {
				sttVARRE = DIG_DEC; // ajusta p/ prox digito
 8002556:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <main+0x530>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
				serial_data = 0x00004; // display #2
 800255c:	2304      	movs	r3, #4
 800255e:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (sttPonto == UNI) { // caso o ponto seja na unidade (modo conversor)
 8002560:	4b60      	ldr	r3, [pc, #384]	; (80026e4 <main+0x520>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d119      	bne.n	800259c <main+0x3d8>
					if (cen > 0 || dez > 0 || uni > 0) {
 8002568:	4b64      	ldr	r3, [pc, #400]	; (80026fc <main+0x538>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	dc07      	bgt.n	8002580 <main+0x3bc>
 8002570:	4b63      	ldr	r3, [pc, #396]	; (8002700 <main+0x53c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	dc03      	bgt.n	8002580 <main+0x3bc>
 8002578:	4b62      	ldr	r3, [pc, #392]	; (8002704 <main+0x540>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	dd07      	ble.n	8002590 <main+0x3cc>
						val7seg = conv_7_seg(cen);
 8002580:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <main+0x538>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fd3d 	bl	8003004 <conv_7_seg>
 800258a:	4603      	mov	r3, r0
 800258c:	86fb      	strh	r3, [r7, #54]	; 0x36
					}
				} else { // caso o ponto seja na dezena (modo relogio)
					val7seg = conv_7_seg(cen);
				}

				break;
 800258e:	e060      	b.n	8002652 <main+0x48e>
						val7seg = conv_7_seg(DIGITO_APAGADO);
 8002590:	2010      	movs	r0, #16
 8002592:	f000 fd37 	bl	8003004 <conv_7_seg>
 8002596:	4603      	mov	r3, r0
 8002598:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 800259a:	e05a      	b.n	8002652 <main+0x48e>
					val7seg = conv_7_seg(cen);
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <main+0x538>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fd2f 	bl	8003004 <conv_7_seg>
 80025a6:	4603      	mov	r3, r0
 80025a8:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 80025aa:	e052      	b.n	8002652 <main+0x48e>
			}
			case DIG_DEC: {
				sttVARRE = DIG_UNI; // ajusta p/ prox digito
 80025ac:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <main+0x530>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
				serial_data = 0x0002; // display #3
 80025b2:	2302      	movs	r3, #2
 80025b4:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (sttPonto == UNI) {
 80025b6:	4b4b      	ldr	r3, [pc, #300]	; (80026e4 <main+0x520>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <main+0x428>
					if (dez > 0 || uni > 0) {
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <main+0x53c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	dc03      	bgt.n	80025ce <main+0x40a>
 80025c6:	4b4f      	ldr	r3, [pc, #316]	; (8002704 <main+0x540>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	dd08      	ble.n	80025e0 <main+0x41c>
						val7seg = conv_7_seg(dez);
 80025ce:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <main+0x53c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fd16 	bl	8003004 <conv_7_seg>
 80025d8:	4603      	mov	r3, r0
 80025da:	86fb      	strh	r3, [r7, #54]	; 0x36
						val7seg &= 0xFFFF; // desliga ponto decimal
 80025dc:	bf00      	nop
				} else {
					val7seg = conv_7_seg(dez);
					val7seg &= 0x7FFF; // liga o ponto decimal
				}

				break;
 80025de:	e038      	b.n	8002652 <main+0x48e>
						val7seg = conv_7_seg(DIGITO_APAGADO);
 80025e0:	2010      	movs	r0, #16
 80025e2:	f000 fd0f 	bl	8003004 <conv_7_seg>
 80025e6:	4603      	mov	r3, r0
 80025e8:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 80025ea:	e032      	b.n	8002652 <main+0x48e>
					val7seg = conv_7_seg(dez);
 80025ec:	4b44      	ldr	r3, [pc, #272]	; (8002700 <main+0x53c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fd07 	bl	8003004 <conv_7_seg>
 80025f6:	4603      	mov	r3, r0
 80025f8:	86fb      	strh	r3, [r7, #54]	; 0x36
					val7seg &= 0x7FFF; // liga o ponto decimal
 80025fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002600:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 8002602:	e026      	b.n	8002652 <main+0x48e>
			}
			case DIG_UNI: {
				sttVARRE = DIG_MILS; // ajusta p/ prox digito
 8002604:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <main+0x530>)
 8002606:	2203      	movs	r2, #3
 8002608:	701a      	strb	r2, [r3, #0]
				serial_data = 0x0001; // display #3
 800260a:	2301      	movs	r3, #1
 800260c:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (sttPonto == UNI) {
 800260e:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <main+0x520>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d115      	bne.n	8002642 <main+0x47e>
					if (uni > 0) {
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <main+0x540>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	dd0b      	ble.n	8002636 <main+0x472>
						val7seg = conv_7_seg(uni);
 800261e:	4b39      	ldr	r3, [pc, #228]	; (8002704 <main+0x540>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fcee 	bl	8003004 <conv_7_seg>
 8002628:	4603      	mov	r3, r0
 800262a:	86fb      	strh	r3, [r7, #54]	; 0x36
						val7seg &= 0x7FFF; // liga o ponto decimal
 800262c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800262e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002632:	86fb      	strh	r3, [r7, #54]	; 0x36
				} else {
					val7seg = conv_7_seg(uni);
					val7seg &= 0xFFFF; // desliga ponto decimal
				}

				break;
 8002634:	e00c      	b.n	8002650 <main+0x48c>
						val7seg = conv_7_seg(DIGITO_APAGADO);
 8002636:	2010      	movs	r0, #16
 8002638:	f000 fce4 	bl	8003004 <conv_7_seg>
 800263c:	4603      	mov	r3, r0
 800263e:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 8002640:	e006      	b.n	8002650 <main+0x48c>
					val7seg = conv_7_seg(uni);
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <main+0x540>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fcdc 	bl	8003004 <conv_7_seg>
 800264c:	4603      	mov	r3, r0
 800264e:	86fb      	strh	r3, [r7, #54]	; 0x36
				break;
 8002650:	bf00      	nop
			}
			} // fim case
			tIN_varre = HAL_GetTick(); // tmp atual em que fez essa varredura
 8002652:	f7fd fdd3 	bl	80001fc <HAL_GetTick>
 8002656:	6338      	str	r0, [r7, #48]	; 0x30
			serial_data |= val7seg; // OR com val7seg = dado a serializar
 8002658:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800265a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800265c:	4313      	orrs	r3, r2
 800265e:	86bb      	strh	r3, [r7, #52]	; 0x34
			serializar(serial_data); // serializa dado p/74HC595 (shift reg)
 8002660:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fd4d 	bl	8003104 <serializar>
		} // -- fim da tarefa #3 - varredura do display

		/// Conexao UART -------------------------------------------------------
		if (statusPrograma == ConexaoUART) {
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <main+0x51c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b04      	cmp	r3, #4
 8002672:	f040 81b2 	bne.w	80029da <main+0x816>
			switch (statusUart) {
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <main+0x544>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b03      	cmp	r3, #3
 800267e:	f200 81d0 	bhi.w	8002a22 <main+0x85e>
 8002682:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <main+0x4c4>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	08002729 	.word	0x08002729
 800268c:	08002699 	.word	0x08002699
 8002690:	0800286d 	.word	0x0800286d
 8002694:	08002925 	.word	0x08002925
			case Idle: // incializa variaveis para iniciar a comunicacao
				tin_UART = HAL_GetTick();
 8002698:	f7fd fdb0 	bl	80001fc <HAL_GetTick>
 800269c:	6238      	str	r0, [r7, #32]
				timeOut_UART = HAL_GetTick();
 800269e:	f7fd fdad 	bl	80001fc <HAL_GetTick>
 80026a2:	61f8      	str	r0, [r7, #28]
				respostaRecebida = false;
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <main+0x548>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
				requisicaoEnviada = false;
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <main+0x54c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
				requisicaoTimeOutEnviada = false;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <main+0x550>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,
 80026b6:	2201      	movs	r2, #1
 80026b8:	f24f 0120 	movw	r1, #61472	; 0xf020
 80026bc:	480b      	ldr	r0, [pc, #44]	; (80026ec <main+0x528>)
 80026be:	f7fe fc90 	bl	8000fe2 <HAL_GPIO_WritePin>
						GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
								| GPIO_PIN_5, GPIO_PIN_SET);
				sttD3 = INI_D3;
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <main+0x554>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
				sttD4 = INI_D4;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <main+0x558>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
				statusUart = TransmitirReq;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <main+0x544>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, buffIn, sizeof(buffIn)); // inicializa buffer de entrada
 80026d4:	2204      	movs	r2, #4
 80026d6:	4912      	ldr	r1, [pc, #72]	; (8002720 <main+0x55c>)
 80026d8:	4812      	ldr	r0, [pc, #72]	; (8002724 <main+0x560>)
 80026da:	f7ff fa20 	bl	8001b1e <HAL_UART_Receive_IT>
				break;
 80026de:	e1a0      	b.n	8002a22 <main+0x85e>
 80026e0:	20000050 	.word	0x20000050
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20000038 	.word	0x20000038
 80026ec:	40010c00 	.word	0x40010c00
 80026f0:	20000070 	.word	0x20000070
 80026f4:	20000051 	.word	0x20000051
 80026f8:	20000040 	.word	0x20000040
 80026fc:	20000044 	.word	0x20000044
 8002700:	20000048 	.word	0x20000048
 8002704:	2000004c 	.word	0x2000004c
 8002708:	20000007 	.word	0x20000007
 800270c:	2000003a 	.word	0x2000003a
 8002710:	2000003b 	.word	0x2000003b
 8002714:	2000003c 	.word	0x2000003c
 8002718:	20000052 	.word	0x20000052
 800271c:	20000053 	.word	0x20000053
 8002720:	20000034 	.word	0x20000034
 8002724:	200000a0 	.word	0x200000a0
			case TransmitirReq: // se o status for de enviar uma requisicao

				if ((HAL_GetTick() - tin_UART) > tempoRequiscoes
 8002728:	f7fd fd68 	bl	80001fc <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2bc8      	cmp	r3, #200	; 0xc8
 8002734:	d912      	bls.n	800275c <main+0x598>
						&& requisicaoEnviada == false) { // se for tempo de fazer uma requisicao
 8002736:	4bae      	ldr	r3, [pc, #696]	; (80029f0 <main+0x82c>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f083 0301 	eor.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <main+0x598>
					tin_UART = HAL_GetTick();
 8002746:	f7fd fd59 	bl	80001fc <HAL_GetTick>
 800274a:	6238      	str	r0, [r7, #32]
					timeOut_UART = HAL_GetTick();
 800274c:	f7fd fd56 	bl	80001fc <HAL_GetTick>
 8002750:	61f8      	str	r0, [r7, #28]
					requisicaoEnviada = true;
 8002752:	4ba7      	ldr	r3, [pc, #668]	; (80029f0 <main+0x82c>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
					TransmitirRequisicaoUART();
 8002758:	f000 fb72 	bl	8002e40 <TransmitirRequisicaoUART>
				}

				// se deu 500 ms, envia mais uma requisicao
				if ((HAL_GetTick() - timeOut_UART) > tempoRespostaMAX
 800275c:	f7fd fd4e 	bl	80001fc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276a:	d90c      	bls.n	8002786 <main+0x5c2>
						&& requisicaoTimeOutEnviada == false) {
 800276c:	4ba1      	ldr	r3, [pc, #644]	; (80029f4 <main+0x830>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f083 0301 	eor.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <main+0x5c2>
					requisicaoTimeOutEnviada = true;
 800277c:	4b9d      	ldr	r3, [pc, #628]	; (80029f4 <main+0x830>)
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
					TransmitirRequisicaoUART();
 8002782:	f000 fb5d 	bl	8002e40 <TransmitirRequisicaoUART>
				}

				// se depois da requisicao de 500ms, ainda nao recebi resposta depois de 500ms
				// erro de conexao
				if ((HAL_GetTick() - timeOut_UART) > 2 * tempoRespostaMAX) {
 8002786:	f7fd fd39 	bl	80001fc <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002794:	d908      	bls.n	80027a8 <main+0x5e4>
					statusUart = ErroConexao;
 8002796:	4b98      	ldr	r3, [pc, #608]	; (80029f8 <main+0x834>)
 8002798:	2203      	movs	r2, #3
 800279a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,
 800279c:	2201      	movs	r2, #1
 800279e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80027a2:	4896      	ldr	r0, [pc, #600]	; (80029fc <main+0x838>)
 80027a4:	f7fe fc1d 	bl	8000fe2 <HAL_GPIO_WritePin>
					GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
							GPIO_PIN_SET); // desl o LED
				}

				// recebi resposta, reseta variaveis de requisicao
				if (respostaRecebida == true) {
 80027a8:	4b95      	ldr	r3, [pc, #596]	; (8002a00 <main+0x83c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d014      	beq.n	80027dc <main+0x618>
					requisicaoTimeOutEnviada = false;
 80027b2:	4b90      	ldr	r3, [pc, #576]	; (80029f4 <main+0x830>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
					requisicaoEnviada = false;
 80027b8:	4b8d      	ldr	r3, [pc, #564]	; (80029f0 <main+0x82c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
					respostaRecebida = false;
 80027be:	4b90      	ldr	r3, [pc, #576]	; (8002a00 <main+0x83c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB,
 80027c4:	2201      	movs	r2, #1
 80027c6:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80027ca:	488c      	ldr	r0, [pc, #560]	; (80029fc <main+0x838>)
 80027cc:	f7fe fc09 	bl	8000fe2 <HAL_GPIO_WritePin>
					GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15, GPIO_PIN_SET); // desl o LED
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // desl o LED
 80027d0:	2200      	movs	r2, #0
 80027d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027d6:	4889      	ldr	r0, [pc, #548]	; (80029fc <main+0x838>)
 80027d8:	f7fe fc03 	bl	8000fe2 <HAL_GPIO_WritePin>
				}
				if (requisicaoEnviada == true) {
 80027dc:	4b84      	ldr	r3, [pc, #528]	; (80029f0 <main+0x82c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8102 	beq.w	80029ec <main+0x828>
					switch (sttD) {
 80027e8:	4b86      	ldr	r3, [pc, #536]	; (8002a04 <main+0x840>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d011      	beq.n	8002814 <main+0x650>
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d023      	beq.n	800283c <main+0x678>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d000      	beq.n	80027fa <main+0x636>
						}
						break;
					};
				}

				break;
 80027f8:	e0f8      	b.n	80029ec <main+0x828>
						tin_D = HAL_GetTick(); // tempo inicial que iniciou a tarefa
 80027fa:	f7fd fcff 	bl	80001fc <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24
						sttD = LIG_D;            // prox estado da máquina
 8002800:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <main+0x840>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB,
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800280c:	487b      	ldr	r0, [pc, #492]	; (80029fc <main+0x838>)
 800280e:	f7fe fbe8 	bl	8000fe2 <HAL_GPIO_WritePin>
						break;
 8002812:	e02a      	b.n	800286a <main+0x6a6>
						if ((HAL_GetTick() - tin_D) > DT_D) {
 8002814:	f7fd fcf2 	bl	80001fc <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d920      	bls.n	8002864 <main+0x6a0>
							tin_D = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 8002822:	f7fd fceb 	bl	80001fc <HAL_GetTick>
 8002826:	6278      	str	r0, [r7, #36]	; 0x24
							sttD = DSLG_D;    // muda o prox estado da máquina
 8002828:	4b76      	ldr	r3, [pc, #472]	; (8002a04 <main+0x840>)
 800282a:	2202      	movs	r2, #2
 800282c:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOB,
 800282e:	2200      	movs	r2, #0
 8002830:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002834:	4871      	ldr	r0, [pc, #452]	; (80029fc <main+0x838>)
 8002836:	f7fe fbd4 	bl	8000fe2 <HAL_GPIO_WritePin>
						break;
 800283a:	e013      	b.n	8002864 <main+0x6a0>
						if ((HAL_GetTick() - tin_D) > DT_D) {
 800283c:	f7fd fcde 	bl	80001fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d90e      	bls.n	8002868 <main+0x6a4>
							tin_D = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 800284a:	f7fd fcd7 	bl	80001fc <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24
							sttD = LIG_D;     // muda o prox estado da máquina
 8002850:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <main+0x840>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOB,
 8002856:	2201      	movs	r2, #1
 8002858:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800285c:	4867      	ldr	r0, [pc, #412]	; (80029fc <main+0x838>)
 800285e:	f7fe fbc0 	bl	8000fe2 <HAL_GPIO_WritePin>
						break;
 8002862:	e001      	b.n	8002868 <main+0x6a4>
						break;
 8002864:	bf00      	nop
 8002866:	e0c1      	b.n	80029ec <main+0x828>
						break;
 8002868:	bf00      	nop
				break;
 800286a:	e0bf      	b.n	80029ec <main+0x828>
			case ErroCheckSum: // se o status for de erro de checksum pisca LED 3
				uni = 0;
 800286c:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <main+0x844>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
				dez = 0;
 8002872:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <main+0x848>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
				cen = 2;
 8002878:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <main+0x84c>)
 800287a:	2202      	movs	r2, #2
 800287c:	601a      	str	r2, [r3, #0]
				mil = 4;
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <main+0x850>)
 8002880:	2204      	movs	r2, #4
 8002882:	601a      	str	r2, [r3, #0]
				switch (sttD3) {
 8002884:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <main+0x854>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d013      	beq.n	80028b4 <main+0x6f0>
 800288c:	2b02      	cmp	r3, #2
 800288e:	d025      	beq.n	80028dc <main+0x718>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d13a      	bne.n	800290a <main+0x746>
				case INI_D3: // vai iniciar a máquina de estado
					tin_D3 = HAL_GetTick(); // tempo inicial que iniciou a tarefa
 8002894:	f7fd fcb2 	bl	80001fc <HAL_GetTick>
 8002898:	62f8      	str	r0, [r7, #44]	; 0x2c
					tin_erro_UART = HAL_GetTick();
 800289a:	f7fd fcaf 	bl	80001fc <HAL_GetTick>
 800289e:	61b8      	str	r0, [r7, #24]
					sttD3 = LIG_D3; // prox estado da máquina
 80028a0:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <main+0x854>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_5,
 80028a6:	2201      	movs	r2, #1
 80028a8:	f242 0120 	movw	r1, #8224	; 0x2020
 80028ac:	4853      	ldr	r0, [pc, #332]	; (80029fc <main+0x838>)
 80028ae:	f7fe fb98 	bl	8000fe2 <HAL_GPIO_WritePin>
							GPIO_PIN_SET); // desl o LED
					break;
 80028b2:	e02a      	b.n	800290a <main+0x746>
				case LIG_D3: // estado para ligar o LED
					if ((HAL_GetTick() - tin_D3) > DT_D) // se for hora de ligar o led
 80028b4:	f7fd fca2 	bl	80001fc <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d920      	bls.n	8002904 <main+0x740>
					{
						tin_D3 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 80028c2:	f7fd fc9b 	bl	80001fc <HAL_GetTick>
 80028c6:	62f8      	str	r0, [r7, #44]	; 0x2c
						sttD3 = DSLG_D3; // muda o prox estado da máquina
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <main+0x854>)
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_5,
 80028ce:	2200      	movs	r2, #0
 80028d0:	f242 0120 	movw	r1, #8224	; 0x2020
 80028d4:	4849      	ldr	r0, [pc, #292]	; (80029fc <main+0x838>)
 80028d6:	f7fe fb84 	bl	8000fe2 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET); // ligaLED
					}
					break;
 80028da:	e013      	b.n	8002904 <main+0x740>
				case DSLG_D3: // estado para desligar o LED
					if ((HAL_GetTick() - tin_D3) > DT_D) // se for hora de desligar o led
 80028dc:	f7fd fc8e 	bl	80001fc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d90e      	bls.n	8002908 <main+0x744>
					{
						tin_D3 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 80028ea:	f7fd fc87 	bl	80001fc <HAL_GetTick>
 80028ee:	62f8      	str	r0, [r7, #44]	; 0x2c
						sttD3 = LIG_D3; // muda o prox estado da máquina
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <main+0x854>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_5,
 80028f6:	2201      	movs	r2, #1
 80028f8:	f242 0120 	movw	r1, #8224	; 0x2020
 80028fc:	483f      	ldr	r0, [pc, #252]	; (80029fc <main+0x838>)
 80028fe:	f7fe fb70 	bl	8000fe2 <HAL_GPIO_WritePin>
								GPIO_PIN_SET); // desl LED
					}
					break;
 8002902:	e001      	b.n	8002908 <main+0x744>
					break;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <main+0x746>
					break;
 8002908:	bf00      	nop
				}
				if ((HAL_GetTick() - tin_erro_UART) > DT_ERRO) // se passou tempo de erro
 800290a:	f7fd fc77 	bl	80001fc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002918:	f240 8082 	bls.w	8002a20 <main+0x85c>
				{
					statusUart = Idle;
 800291c:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <main+0x834>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
				}

				break;
 8002922:	e07d      	b.n	8002a20 <main+0x85c>
			case ErroConexao: // se o status for de erro de conexao pisca LED 4
				uni = 0;
 8002924:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <main+0x844>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
				dez = 6;
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <main+0x848>)
 800292c:	2206      	movs	r2, #6
 800292e:	601a      	str	r2, [r3, #0]
				cen = 6;
 8002930:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <main+0x84c>)
 8002932:	2206      	movs	r2, #6
 8002934:	601a      	str	r2, [r3, #0]
				mil = 6;
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <main+0x850>)
 8002938:	2206      	movs	r2, #6
 800293a:	601a      	str	r2, [r3, #0]

				switch (sttD4) {
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <main+0x858>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d013      	beq.n	800296c <main+0x7a8>
 8002944:	2b02      	cmp	r3, #2
 8002946:	d025      	beq.n	8002994 <main+0x7d0>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d13a      	bne.n	80029c2 <main+0x7fe>
				case INI_D4: // vai iniciar a máquina de estado
					tin_D4 = HAL_GetTick(); // tempo inicial que iniciou a tarefa
 800294c:	f7fd fc56 	bl	80001fc <HAL_GetTick>
 8002950:	62b8      	str	r0, [r7, #40]	; 0x28
					tin_erro_UART = HAL_GetTick();
 8002952:	f7fd fc53 	bl	80001fc <HAL_GetTick>
 8002956:	61b8      	str	r0, [r7, #24]
					sttD4 = LIG_D4; // prox estado da máquina
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <main+0x858>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_5,
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002964:	4825      	ldr	r0, [pc, #148]	; (80029fc <main+0x838>)
 8002966:	f7fe fb3c 	bl	8000fe2 <HAL_GPIO_WritePin>
							GPIO_PIN_SET); // desl o LED
					break;
 800296a:	e02a      	b.n	80029c2 <main+0x7fe>
				case LIG_D4: // estado para ligar o LED
					if ((HAL_GetTick() - tin_D4) > DT_D) // se for hora de ligar o led
 800296c:	f7fd fc46 	bl	80001fc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d920      	bls.n	80029bc <main+0x7f8>
					{
						tin_D4 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 800297a:	f7fd fc3f 	bl	80001fc <HAL_GetTick>
 800297e:	62b8      	str	r0, [r7, #40]	; 0x28
						sttD4 = DSLG_D4; // muda o prox estado da máquina
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <main+0x858>)
 8002982:	2202      	movs	r2, #2
 8002984:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_5,
 8002986:	2200      	movs	r2, #0
 8002988:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800298c:	481b      	ldr	r0, [pc, #108]	; (80029fc <main+0x838>)
 800298e:	f7fe fb28 	bl	8000fe2 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET); // ligaLED
					}
					break;
 8002992:	e013      	b.n	80029bc <main+0x7f8>
				case DSLG_D4: // estado para desligar o LED
					if ((HAL_GetTick() - tin_D4) > DT_D) // se for hora de desligar o led
 8002994:	f7fd fc32 	bl	80001fc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d90e      	bls.n	80029c0 <main+0x7fc>
					{
						tin_D4 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 80029a2:	f7fd fc2b 	bl	80001fc <HAL_GetTick>
 80029a6:	62b8      	str	r0, [r7, #40]	; 0x28
						sttD4 = LIG_D4; // muda o prox estado da máquina
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <main+0x858>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_5,
 80029ae:	2201      	movs	r2, #1
 80029b0:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80029b4:	4811      	ldr	r0, [pc, #68]	; (80029fc <main+0x838>)
 80029b6:	f7fe fb14 	bl	8000fe2 <HAL_GPIO_WritePin>
								GPIO_PIN_SET); // desl LED
					}
					break;
 80029ba:	e001      	b.n	80029c0 <main+0x7fc>
					break;
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <main+0x7fe>
					break;
 80029c0:	bf00      	nop
				}
				if ((HAL_GetTick() - tin_erro_UART) > DT_ERRO) // se passou tempo de erro
 80029c2:	f7fd fc1b 	bl	80001fc <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d0:	d927      	bls.n	8002a22 <main+0x85e>
				{
					statusUart = Idle;
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <main+0x834>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e023      	b.n	8002a22 <main+0x85e>
				}
			}
		} else {
			// se nao esta no modo de conexao, volta ao status idle e desliga o buzzer
			statusUart = Idle;
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <main+0x834>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // desl buzzer
 80029e0:	2201      	movs	r2, #1
 80029e2:	2120      	movs	r1, #32
 80029e4:	4805      	ldr	r0, [pc, #20]	; (80029fc <main+0x838>)
 80029e6:	f7fe fafc 	bl	8000fe2 <HAL_GPIO_WritePin>
 80029ea:	e01a      	b.n	8002a22 <main+0x85e>
				break;
 80029ec:	bf00      	nop
 80029ee:	e018      	b.n	8002a22 <main+0x85e>
 80029f0:	2000003b 	.word	0x2000003b
 80029f4:	2000003c 	.word	0x2000003c
 80029f8:	20000007 	.word	0x20000007
 80029fc:	40010c00 	.word	0x40010c00
 8002a00:	2000003a 	.word	0x2000003a
 8002a04:	20000054 	.word	0x20000054
 8002a08:	2000004c 	.word	0x2000004c
 8002a0c:	20000048 	.word	0x20000048
 8002a10:	20000044 	.word	0x20000044
 8002a14:	20000040 	.word	0x20000040
 8002a18:	20000052 	.word	0x20000052
 8002a1c:	20000053 	.word	0x20000053
				break;
 8002a20:	bf00      	nop
		}

		// Reset ----------------------------------------------------------------
		if (statusPrograma == Reset) {
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <main+0x8b0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	f47f ac0c 	bne.w	8002246 <main+0x82>
			statusUart = Idle;
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <main+0x8b4>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
			respostaRecebida = false;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <main+0x8b8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
			requisicaoEnviada = false;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <main+0x8bc>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
			requisicaoTimeOutEnviada = false;
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <main+0x8c0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
			HRuni = 0, HRdec = 0, MINuni = 0, MINdec = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	757b      	strb	r3, [r7, #21]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	753b      	strb	r3, [r7, #20]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]
 8002a52:	2300      	movs	r3, #0
 8002a54:	75bb      	strb	r3, [r7, #22]
			reset_modo_oper_programa();
 8002a56:	f000 fd4d 	bl	80034f4 <reset_modo_oper_programa>

			HAL_GPIO_WritePin(GPIOB,
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f24f 0120 	movw	r1, #61472	; 0xf020
 8002a60:	4809      	ldr	r0, [pc, #36]	; (8002a88 <main+0x8c4>)
 8002a62:	f7fe fabe 	bl	8000fe2 <HAL_GPIO_WritePin>
			GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12 | GPIO_PIN_5,
					GPIO_PIN_SET); // desliga os leds

			HAL_UART_Receive_IT(&huart1, buffIn, sizeof(buffIn)); // inicializa buffer de entrada
 8002a66:	2204      	movs	r2, #4
 8002a68:	4908      	ldr	r1, [pc, #32]	; (8002a8c <main+0x8c8>)
 8002a6a:	4809      	ldr	r0, [pc, #36]	; (8002a90 <main+0x8cc>)
 8002a6c:	f7ff f857 	bl	8001b1e <HAL_UART_Receive_IT>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) {
 8002a70:	f7ff bbe9 	b.w	8002246 <main+0x82>
 8002a74:	20000050 	.word	0x20000050
 8002a78:	20000007 	.word	0x20000007
 8002a7c:	2000003a 	.word	0x2000003a
 8002a80:	2000003b 	.word	0x2000003b
 8002a84:	2000003c 	.word	0x2000003c
 8002a88:	40010c00 	.word	0x40010c00
 8002a8c:	20000034 	.word	0x20000034
 8002a90:	200000a0 	.word	0x200000a0

08002a94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b094      	sub	sp, #80	; 0x50
 8002a98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9e:	2228      	movs	r2, #40	; 0x28
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fde8 	bl	8003678 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ade:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ae0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fab4 	bl	8001058 <HAL_RCC_OscConfig>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <SystemClock_Config+0x66>
		Error_Handler();
 8002af6:	f000 fa7f 	bl	8002ff8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002afa:	230f      	movs	r3, #15
 8002afc:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b0a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fd1e 	bl	8001558 <HAL_RCC_ClockConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <SystemClock_Config+0x92>
		Error_Handler();
 8002b22:	f000 fa69 	bl	8002ff8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b26:	2302      	movs	r3, #2
 8002b28:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe feac 	bl	8001890 <HAL_RCCEx_PeriphCLKConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <SystemClock_Config+0xae>
		Error_Handler();
 8002b3e:	f000 fa5b 	bl	8002ff8 <Error_Handler>
	}
}
 8002b42:	bf00      	nop
 8002b44:	3750      	adds	r7, #80	; 0x50
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	af00      	add	r7, sp, #0
	/* EXTI1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	2007      	movs	r0, #7
 8002b54:	f7fe f827 	bl	8000ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b58:	2007      	movs	r0, #7
 8002b5a:	f7fe f840 	bl	8000bde <HAL_NVIC_EnableIRQ>
	/* EXTI2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	2008      	movs	r0, #8
 8002b64:	f7fe f81f 	bl	8000ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b68:	2008      	movs	r0, #8
 8002b6a:	f7fe f838 	bl	8000bde <HAL_NVIC_EnableIRQ>
	/* EXTI3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2009      	movs	r0, #9
 8002b74:	f7fe f817 	bl	8000ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b78:	2009      	movs	r0, #9
 8002b7a:	f7fe f830 	bl	8000bde <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	2025      	movs	r0, #37	; 0x25
 8002b84:	f7fe f80f 	bl	8000ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b88:	2025      	movs	r0, #37	; 0x25
 8002b8a:	f7fe f828 	bl	8000bde <HAL_NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002ba6:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <MX_ADC1_Init+0x78>)
 8002ba8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002bbe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002bc2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002bd2:	f7fd fb1d 	bl	8000210 <HAL_ADC_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8002bdc:	f000 fa0c 	bl	8002ff8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002be4:	2301      	movs	r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_ADC1_Init+0x74>)
 8002bf2:	f7fd fd73 	bl	80006dc <HAL_ADC_ConfigChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8002bfc:	f000 f9fc 	bl	8002ff8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000070 	.word	0x20000070
 8002c0c:	40012400 	.word	0x40012400

08002c10 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <MX_USART1_UART_Init+0x50>)
 8002c18:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c1c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002c20:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c48:	f7fe fed8 	bl	80019fc <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002c52:	f000 f9d1 	bl	8002ff8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200000a0 	.word	0x200000a0
 8002c60:	40013800 	.word	0x40013800

08002c64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c6a:	f107 0310 	add.w	r3, r7, #16
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002cae:	f043 0308 	orr.w	r3, r3, #8
 8002cb2:	6193      	str	r3, [r2, #24]
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <MX_GPIO_Init+0xa8>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f24f 6160 	movw	r1, #63072	; 0xf660
 8002cc6:	4812      	ldr	r0, [pc, #72]	; (8002d10 <MX_GPIO_Init+0xac>)
 8002cc8:	f7fe f98b 	bl	8000fe2 <HAL_GPIO_WritePin>
			GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
					| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA1 PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8002ccc:	230e      	movs	r3, #14
 8002cce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <MX_GPIO_Init+0xb0>)
 8002cd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 0310 	add.w	r3, r7, #16
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480e      	ldr	r0, [pc, #56]	; (8002d18 <MX_GPIO_Init+0xb4>)
 8002ce0:	f7fe f80e 	bl	8000d00 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB13 PB14
	 PB15 PB5 PB6 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8002ce4:	f24f 6360 	movw	r3, #63072	; 0xf660
 8002ce8:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_15 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cea:	2301      	movs	r3, #1
 8002cec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf6:	f107 0310 	add.w	r3, r7, #16
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4804      	ldr	r0, [pc, #16]	; (8002d10 <MX_GPIO_Init+0xac>)
 8002cfe:	f7fd ffff 	bl	8000d00 <HAL_GPIO_Init>

}
 8002d02:	bf00      	nop
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40010c00 	.word	0x40010c00
 8002d14:	10210000 	.word	0x10210000
 8002d18:	40010800 	.word	0x40010800

08002d1c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// callback do envio de dados
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
	}
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_UART_RxCpltCallback>:

// callback do recebimento de dados
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a38      	ldr	r2, [pc, #224]	; (8002e20 <HAL_UART_RxCpltCallback+0xf0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d16a      	bne.n	8002e18 <HAL_UART_RxCpltCallback+0xe8>

		if (buffIn[0] == r && buffIn[1] == r && buffIn[2] == r
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <HAL_UART_RxCpltCallback+0xf8>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d117      	bne.n	8002d80 <HAL_UART_RxCpltCallback+0x50>
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <HAL_UART_RxCpltCallback+0xf8>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d110      	bne.n	8002d80 <HAL_UART_RxCpltCallback+0x50>
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002d60:	789b      	ldrb	r3, [r3, #2]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_UART_RxCpltCallback+0xf8>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d109      	bne.n	8002d80 <HAL_UART_RxCpltCallback+0x50>
				&& buffIn[3] == r) { // caso seja uma requisição de dados
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002d6e:	78db      	ldrb	r3, [r3, #3]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_UART_RxCpltCallback+0xf8>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d102      	bne.n	8002d80 <HAL_UART_RxCpltCallback+0x50>

			TransmitirDadosUART();
 8002d7a:	f000 f881 	bl	8002e80 <TransmitirDadosUART>
 8002d7e:	e046      	b.n	8002e0e <HAL_UART_RxCpltCallback+0xde>

		} else { // senao eu estou recebendo um dado
			uint16_t checkSumCalculado = 0x0000 | ((uint16_t) buffIn[0] + buffIn[1]); // faz a soma da parte alta com a baixa
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	81fb      	strh	r3, [r7, #14]
			uint16_t checkSumRecebido = 0x0000 | ((uint16_t) buffIn[2] << 8) | buffIn[3]; // monta o checksum recebido
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002d96:	789b      	ldrb	r3, [r3, #2]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	b21a      	sxth	r2, r3
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002da0:	78db      	ldrb	r3, [r3, #3]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	b21b      	sxth	r3, r3
 8002da6:	4313      	orrs	r3, r2
 8002da8:	b21b      	sxth	r3, r3
 8002daa:	81bb      	strh	r3, [r7, #12]

			respostaRecebida = true; // recebi uma resposta
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_UART_RxCpltCallback+0xfc>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]

			if (checkSumCalculado == checkSumRecebido) { // se o checksum for correto
 8002db2:	89fa      	ldrh	r2, [r7, #14]
 8002db4:	89bb      	ldrh	r3, [r7, #12]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d117      	bne.n	8002dea <HAL_UART_RxCpltCallback+0xba>
				// salva valor recebido em uma variavel de 16 bits
				valorConversorRecebido = ((uint16_t) buffIn[0] << 8)
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	021b      	lsls	r3, r3, #8
						| buffIn[1];
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	b21b      	sxth	r3, r3
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	b21b      	sxth	r3, r3
 8002dd0:	b29a      	uxth	r2, r3
				valorConversorRecebido = ((uint16_t) buffIn[0] << 8)
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_UART_RxCpltCallback+0x100>)
 8002dd4:	801a      	strh	r2, [r3, #0]
				ConverteValorDoConversor(valorConversorRecebido);
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <HAL_UART_RxCpltCallback+0x100>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f883 	bl	8002ee8 <ConverteValorDoConversor>
				requisicaoAtual = 1; // reseta variavel de requisicao para 1
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_UART_RxCpltCallback+0x104>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e011      	b.n	8002e0e <HAL_UART_RxCpltCallback+0xde>

			} else { // se o valor recebido nao for o correto, envia outra requisicao
				requisicaoAtual++; // incremente numero da requisicao
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_UART_RxCpltCallback+0x104>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <HAL_UART_RxCpltCallback+0x104>)
 8002df6:	701a      	strb	r2, [r3, #0]
				if (requisicaoAtual > requisicoesCheckSumIncorretoMAX) { // se ja foi enviado 3 requisicoes
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_UART_RxCpltCallback+0x104>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d905      	bls.n	8002e0e <HAL_UART_RxCpltCallback+0xde>
					statusUart = ErroCheckSum; // atribui status de erro
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <HAL_UART_RxCpltCallback+0x108>)
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
					requisicaoAtual = 1;
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_UART_RxCpltCallback+0x104>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		HAL_UART_Receive_IT(&huart1, buffIn, sizeof(buffIn)); // inicializa buffer de entrada
 8002e0e:	2204      	movs	r2, #4
 8002e10:	4904      	ldr	r1, [pc, #16]	; (8002e24 <HAL_UART_RxCpltCallback+0xf4>)
 8002e12:	480a      	ldr	r0, [pc, #40]	; (8002e3c <HAL_UART_RxCpltCallback+0x10c>)
 8002e14:	f7fe fe83 	bl	8001b1e <HAL_UART_Receive_IT>
	}
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40013800 	.word	0x40013800
 8002e24:	20000034 	.word	0x20000034
 8002e28:	20000005 	.word	0x20000005
 8002e2c:	2000003a 	.word	0x2000003a
 8002e30:	200000e0 	.word	0x200000e0
 8002e34:	20000006 	.word	0x20000006
 8002e38:	20000007 	.word	0x20000007
 8002e3c:	200000a0 	.word	0x200000a0

08002e40 <TransmitirRequisicaoUART>:

// transmite uma requisicao
void TransmitirRequisicaoUART(void) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
// prepara requisicao
	buffOutReq[0] = r;
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <TransmitirRequisicaoUART+0x34>)
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <TransmitirRequisicaoUART+0x38>)
 8002e4a:	701a      	strb	r2, [r3, #0]
	buffOutReq[1] = r;
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <TransmitirRequisicaoUART+0x34>)
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <TransmitirRequisicaoUART+0x38>)
 8002e52:	705a      	strb	r2, [r3, #1]
	buffOutReq[2] = r;
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <TransmitirRequisicaoUART+0x34>)
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <TransmitirRequisicaoUART+0x38>)
 8002e5a:	709a      	strb	r2, [r3, #2]
	buffOutReq[3] = r;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <TransmitirRequisicaoUART+0x34>)
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <TransmitirRequisicaoUART+0x38>)
 8002e62:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit_IT(&huart1, buffOutReq, sizeof(buffOutReq)); // envia requisicao
 8002e64:	2204      	movs	r2, #4
 8002e66:	4904      	ldr	r1, [pc, #16]	; (8002e78 <TransmitirRequisicaoUART+0x38>)
 8002e68:	4804      	ldr	r0, [pc, #16]	; (8002e7c <TransmitirRequisicaoUART+0x3c>)
 8002e6a:	f7fe fe14 	bl	8001a96 <HAL_UART_Transmit_IT>
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000005 	.word	0x20000005
 8002e78:	2000002c 	.word	0x2000002c
 8002e7c:	200000a0 	.word	0x200000a0

08002e80 <TransmitirDadosUART>:

// transmite dados
void TransmitirDadosUART(void) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
	buffOutDado[1] = (uint8_t) 0xFF & val_adc;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <TransmitirDadosUART+0x5c>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <TransmitirDadosUART+0x60>)
 8002e90:	705a      	strb	r2, [r3, #1]
	buffOutDado[0] = (uint8_t) 0xFF & (val_adc >> 8);
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <TransmitirDadosUART+0x5c>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <TransmitirDadosUART+0x60>)
 8002ea0:	701a      	strb	r2, [r3, #0]
	uint16_t checkSum = (uint16_t) buffOutDado[0] + buffOutDado[1];
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <TransmitirDadosUART+0x60>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <TransmitirDadosUART+0x60>)
 8002eac:	785b      	ldrb	r3, [r3, #1]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]

	buffOutDado[3] = (uint8_t) 0xFF & checkSum;
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <TransmitirDadosUART+0x60>)
 8002ebc:	70da      	strb	r2, [r3, #3]
	buffOutDado[2] = (uint8_t) 0xFF & (checkSum >> 8);
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <TransmitirDadosUART+0x60>)
 8002ec8:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, buffOutDado, sizeof(buffOutDado)); // envia requisicao
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4904      	ldr	r1, [pc, #16]	; (8002ee0 <TransmitirDadosUART+0x60>)
 8002ece:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <TransmitirDadosUART+0x64>)
 8002ed0:	f7fe fde1 	bl	8001a96 <HAL_UART_Transmit_IT>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000038 	.word	0x20000038
 8002ee0:	20000030 	.word	0x20000030
 8002ee4:	200000a0 	.word	0x200000a0

08002ee8 <ConverteValorDoConversor>:

// converte o valor do conversor para milivolts
void ConverteValorDoConversor(uint16_t val) {
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
// converter o valor em decimais p/ display
	uint32_t miliVolt = val * 3300 / 4095;
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <ConverteValorDoConversor+0xbc>)
 8002efe:	fb82 1203 	smull	r1, r2, r2, r3
 8002f02:	441a      	add	r2, r3
 8002f04:	12d2      	asrs	r2, r2, #11
 8002f06:	17db      	asrs	r3, r3, #31
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
	uni = miliVolt / 1000;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <ConverteValorDoConversor+0xc0>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b24      	ldr	r3, [pc, #144]	; (8002fac <ConverteValorDoConversor+0xc4>)
 8002f1a:	601a      	str	r2, [r3, #0]
	dez = (miliVolt - (uni * 1000)) / 100;
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <ConverteValorDoConversor+0xc4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <ConverteValorDoConversor+0xc8>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <ConverteValorDoConversor+0xcc>)
 8002f3a:	601a      	str	r2, [r3, #0]
	cen = (miliVolt - (uni * 1000) - (dez * 100)) / 10;
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <ConverteValorDoConversor+0xc4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <ConverteValorDoConversor+0xcc>)
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	2164      	movs	r1, #100	; 0x64
 8002f54:	fb01 f202 	mul.w	r2, r1, r2
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <ConverteValorDoConversor+0xd0>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	08db      	lsrs	r3, r3, #3
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <ConverteValorDoConversor+0xd4>)
 8002f66:	601a      	str	r2, [r3, #0]
	mil = miliVolt - (uni * 1000) - (dez * 100) - (cen * 10);
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <ConverteValorDoConversor+0xc4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <ConverteValorDoConversor+0xcc>)
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	2164      	movs	r1, #100	; 0x64
 8002f80:	fb01 f202 	mul.w	r2, r1, r2
 8002f84:	1a99      	subs	r1, r3, r2
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <ConverteValorDoConversor+0xd4>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	1acb      	subs	r3, r1, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <ConverteValorDoConversor+0xd8>)
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	80080081 	.word	0x80080081
 8002fa8:	10624dd3 	.word	0x10624dd3
 8002fac:	2000004c 	.word	0x2000004c
 8002fb0:	51eb851f 	.word	0x51eb851f
 8002fb4:	20000048 	.word	0x20000048
 8002fb8:	cccccccd 	.word	0xcccccccd
 8002fbc:	20000044 	.word	0x20000044
 8002fc0:	20000040 	.word	0x20000040

08002fc4 <HAL_ADC_ConvCpltCallback>:

// fn que atende ao callback da ISR do conversor ADC1
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a06      	ldr	r2, [pc, #24]	; (8002fec <HAL_ADC_ConvCpltCallback+0x28>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d106      	bne.n	8002fe4 <HAL_ADC_ConvCpltCallback+0x20>
		val_adc = HAL_ADC_GetValue(&hadc1); // capta valor adc
 8002fd6:	4806      	ldr	r0, [pc, #24]	; (8002ff0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002fd8:	f7fd faa8 	bl	800052c <HAL_ADC_GetValue>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <HAL_ADC_ConvCpltCallback+0x30>)
 8002fe2:	801a      	strh	r2, [r3, #0]
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40012400 	.word	0x40012400
 8002ff0:	20000070 	.word	0x20000070
 8002ff4:	20000038 	.word	0x20000038

08002ff8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <conv_7_seg>:
Ordem dos bits no registrador de deslocamento:
dp g f e d c b a 0 0 0 0 0 0 0 0       (fara' um OR no retorno)
OBS: esta rotina nao liga  o DP...
 ----------------------------------------------------------------------------*/
int16_t conv_7_seg(int NumHex)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  int16_t sseg = 0xFF00;
 800300c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003010:	81fb      	strh	r3, [r7, #14]
  switch(NumHex)                     // valores default p/ ANODO comum
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b10      	cmp	r3, #16
 8003016:	d869      	bhi.n	80030ec <conv_7_seg+0xe8>
 8003018:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <conv_7_seg+0x1c>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003065 	.word	0x08003065
 8003024:	0800306d 	.word	0x0800306d
 8003028:	08003075 	.word	0x08003075
 800302c:	0800307d 	.word	0x0800307d
 8003030:	08003085 	.word	0x08003085
 8003034:	0800308d 	.word	0x0800308d
 8003038:	08003095 	.word	0x08003095
 800303c:	0800309d 	.word	0x0800309d
 8003040:	080030a5 	.word	0x080030a5
 8003044:	080030ad 	.word	0x080030ad
 8003048:	080030b5 	.word	0x080030b5
 800304c:	080030bd 	.word	0x080030bd
 8003050:	080030c5 	.word	0x080030c5
 8003054:	080030cd 	.word	0x080030cd
 8003058:	080030d5 	.word	0x080030d5
 800305c:	080030dd 	.word	0x080030dd
 8003060:	080030e5 	.word	0x080030e5
  {
    case 0: {sseg = 0xC000; break;}  // retorna val p/ 0
 8003064:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003068:	81fb      	strh	r3, [r7, #14]
 800306a:	e043      	b.n	80030f4 <conv_7_seg+0xf0>
    case 1: {sseg = 0xF900; break;}  // retorna val p/ 1
 800306c:	f44f 4379 	mov.w	r3, #63744	; 0xf900
 8003070:	81fb      	strh	r3, [r7, #14]
 8003072:	e03f      	b.n	80030f4 <conv_7_seg+0xf0>
    case 2: {sseg = 0xA400; break;}  // retorna val p/ 2
 8003074:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8003078:	81fb      	strh	r3, [r7, #14]
 800307a:	e03b      	b.n	80030f4 <conv_7_seg+0xf0>
    case 3: {sseg = 0xB000; break;}  // retorna val p/ 3
 800307c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003080:	81fb      	strh	r3, [r7, #14]
 8003082:	e037      	b.n	80030f4 <conv_7_seg+0xf0>
    case 4: {sseg = 0x9900; break;}  // retorna val p/ 4
 8003084:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8003088:	81fb      	strh	r3, [r7, #14]
 800308a:	e033      	b.n	80030f4 <conv_7_seg+0xf0>
    case 5: {sseg = 0x9200; break;}  // retorna val p/ 5
 800308c:	f44f 4312 	mov.w	r3, #37376	; 0x9200
 8003090:	81fb      	strh	r3, [r7, #14]
 8003092:	e02f      	b.n	80030f4 <conv_7_seg+0xf0>
    case 6: {sseg = 0x8200; break;}  // retorna val p/ 6
 8003094:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8003098:	81fb      	strh	r3, [r7, #14]
 800309a:	e02b      	b.n	80030f4 <conv_7_seg+0xf0>
    case 7: {sseg = 0xF800; break;}  // retorna val p/ 7
 800309c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030a0:	81fb      	strh	r3, [r7, #14]
 80030a2:	e027      	b.n	80030f4 <conv_7_seg+0xf0>
    case 8: {sseg = 0x8000; break;}  // retorna val p/ 8
 80030a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a8:	81fb      	strh	r3, [r7, #14]
 80030aa:	e023      	b.n	80030f4 <conv_7_seg+0xf0>
    case 9: {sseg = 0x9000; break;}  // retorna val p/ 9
 80030ac:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80030b0:	81fb      	strh	r3, [r7, #14]
 80030b2:	e01f      	b.n	80030f4 <conv_7_seg+0xf0>
    case 10: {sseg = 0x8800; break;} // retorna val p/ A
 80030b4:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80030b8:	81fb      	strh	r3, [r7, #14]
 80030ba:	e01b      	b.n	80030f4 <conv_7_seg+0xf0>
    case 11: {sseg = 0x8300; break;} // retorna val p/ B
 80030bc:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80030c0:	81fb      	strh	r3, [r7, #14]
 80030c2:	e017      	b.n	80030f4 <conv_7_seg+0xf0>
    case 12: {sseg = 0xC600; break;} // retorna val p/ C
 80030c4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80030c8:	81fb      	strh	r3, [r7, #14]
 80030ca:	e013      	b.n	80030f4 <conv_7_seg+0xf0>
    case 13: {sseg = 0xA100; break;} // retorna val p/ D
 80030cc:	f44f 4321 	mov.w	r3, #41216	; 0xa100
 80030d0:	81fb      	strh	r3, [r7, #14]
 80030d2:	e00f      	b.n	80030f4 <conv_7_seg+0xf0>
    case 14: {sseg = 0x8600; break;} // retorna val p/ E
 80030d4:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 80030d8:	81fb      	strh	r3, [r7, #14]
 80030da:	e00b      	b.n	80030f4 <conv_7_seg+0xf0>
    case 15: {sseg = 0x8E00; break;} // retorna val p/ F
 80030dc:	f44f 430e 	mov.w	r3, #36352	; 0x8e00
 80030e0:	81fb      	strh	r3, [r7, #14]
 80030e2:	e007      	b.n	80030f4 <conv_7_seg+0xf0>
    case 16: {sseg = 0xFF00; break;} // default = tudo desligado
 80030e4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80030e8:	81fb      	strh	r3, [r7, #14]
 80030ea:	e003      	b.n	80030f4 <conv_7_seg+0xf0>
    default: {sseg = 0xBF00; break;} // ERRO retorna "-" (so' g ligado)
 80030ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80030f0:	81fb      	strh	r3, [r7, #14]
 80030f2:	bf00      	nop
  }
  if (TIPO_DISPLAY == 0)             // ANODO COMUM sai como a tabela
    return sseg;
 80030f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  else                               // CATODO inverte bits (bitwise)
    return ~sseg;
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop

08003104 <serializar>:

// FUNCAO que serializa os dados de 'ser_data' o 74HC595
void serializar(int ser_data)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  int stts = 15;                 // envia bit MSB 1o. = dp na placa
 800310c:	230f      	movs	r3, #15
 800310e:	60fb      	str	r3, [r7, #12]
  do
  {
    if ((ser_data >> stts) & 1)  // se ser_data desloc >> ssts ='1'
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	fa42 f303 	asr.w	r3, r2, r3
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <serializar+0x2a>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   // SDATA=1
 8003120:	2201      	movs	r2, #1
 8003122:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003126:	4815      	ldr	r0, [pc, #84]	; (800317c <serializar+0x78>)
 8003128:	f7fd ff5b 	bl	8000fe2 <HAL_GPIO_WritePin>
 800312c:	e005      	b.n	800313a <serializar+0x36>
    } else {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // SDATA=0
 800312e:	2200      	movs	r2, #0
 8003130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003134:	4811      	ldr	r0, [pc, #68]	; (800317c <serializar+0x78>)
 8003136:	f7fd ff54 	bl	8000fe2 <HAL_GPIO_WritePin>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);      // SCK=1
 800313a:	2201      	movs	r2, #1
 800313c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003140:	480e      	ldr	r0, [pc, #56]	; (800317c <serializar+0x78>)
 8003142:	f7fd ff4e 	bl	8000fe2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);    // SCK=0
 8003146:	2200      	movs	r2, #0
 8003148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800314c:	480b      	ldr	r0, [pc, #44]	; (800317c <serializar+0x78>)
 800314e:	f7fd ff48 	bl	8000fe2 <HAL_GPIO_WritePin>
    stts--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3b01      	subs	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
  } while (stts>=0);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	dad8      	bge.n	8003110 <serializar+0xc>
	// depois de serializar tudo, tem que gerar RCK
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);      // RCK=1
 800315e:	2201      	movs	r2, #1
 8003160:	2140      	movs	r1, #64	; 0x40
 8003162:	4806      	ldr	r0, [pc, #24]	; (800317c <serializar+0x78>)
 8003164:	f7fd ff3d 	bl	8000fe2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);    // RCK=0
 8003168:	2200      	movs	r2, #0
 800316a:	2140      	movs	r1, #64	; 0x40
 800316c:	4803      	ldr	r0, [pc, #12]	; (800317c <serializar+0x78>)
 800316e:	f7fd ff38 	bl	8000fe2 <HAL_GPIO_WritePin>
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40010c00 	.word	0x40010c00

08003180 <reset_pin_GPIOs>:

// esta função zera os pinos ao inicializar a placa
void reset_pin_GPIOs (void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  // garantir que pinos serial comecam com zero
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);     // SDATA=0
 8003184:	2200      	movs	r2, #0
 8003186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800318a:	4808      	ldr	r0, [pc, #32]	; (80031ac <reset_pin_GPIOs+0x2c>)
 800318c:	f7fd ff29 	bl	8000fe2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);      // SCK=0
 8003190:	2200      	movs	r2, #0
 8003192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003196:	4805      	ldr	r0, [pc, #20]	; (80031ac <reset_pin_GPIOs+0x2c>)
 8003198:	f7fd ff23 	bl	8000fe2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);      // RCK=0
 800319c:	2200      	movs	r2, #0
 800319e:	2140      	movs	r1, #64	; 0x40
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <reset_pin_GPIOs+0x2c>)
 80031a2:	f7fd ff1e 	bl	8000fe2 <HAL_GPIO_WritePin>
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40010c00 	.word	0x40010c00

080031b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_MspInit+0x5c>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_MspInit+0x5c>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6193      	str	r3, [r2, #24]
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_MspInit+0x5c>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <HAL_MspInit+0x5c>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4a0e      	ldr	r2, [pc, #56]	; (800320c <HAL_MspInit+0x5c>)
 80031d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d8:	61d3      	str	r3, [r2, #28]
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_MspInit+0x5c>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	607b      	str	r3, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_MspInit+0x60>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_MspInit+0x60>)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40021000 	.word	0x40021000
 8003210:	40010000 	.word	0x40010000

08003214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_ADC_MspInit+0x7c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d129      	bne.n	8003288 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_ADC_MspInit+0x80>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_ADC_MspInit+0x80>)
 800323a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800323e:	6193      	str	r3, [r2, #24]
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_ADC_MspInit+0x80>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_ADC_MspInit+0x80>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a10      	ldr	r2, [pc, #64]	; (8003294 <HAL_ADC_MspInit+0x80>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_ADC_MspInit+0x80>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003264:	2301      	movs	r3, #1
 8003266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003268:	2303      	movs	r3, #3
 800326a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	4619      	mov	r1, r3
 8003272:	4809      	ldr	r0, [pc, #36]	; (8003298 <HAL_ADC_MspInit+0x84>)
 8003274:	f7fd fd44 	bl	8000d00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003278:	2200      	movs	r2, #0
 800327a:	2100      	movs	r1, #0
 800327c:	2012      	movs	r0, #18
 800327e:	f7fd fc92 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003282:	2012      	movs	r0, #18
 8003284:	f7fd fcab 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003288:	bf00      	nop
 800328a:	3720      	adds	r7, #32
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40012400 	.word	0x40012400
 8003294:	40021000 	.word	0x40021000
 8003298:	40010800 	.word	0x40010800

0800329c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_UART_MspInit+0x8c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d131      	bne.n	8003320 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_UART_MspInit+0x90>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_UART_MspInit+0x90>)
 80032c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c6:	6193      	str	r3, [r2, #24]
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_UART_MspInit+0x90>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_UART_MspInit+0x90>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_UART_MspInit+0x90>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6193      	str	r3, [r2, #24]
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_UART_MspInit+0x90>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f6:	2303      	movs	r3, #3
 80032f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fa:	f107 0310 	add.w	r3, r7, #16
 80032fe:	4619      	mov	r1, r3
 8003300:	480b      	ldr	r0, [pc, #44]	; (8003330 <HAL_UART_MspInit+0x94>)
 8003302:	f7fd fcfd 	bl	8000d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003314:	f107 0310 	add.w	r3, r7, #16
 8003318:	4619      	mov	r1, r3
 800331a:	4805      	ldr	r0, [pc, #20]	; (8003330 <HAL_UART_MspInit+0x94>)
 800331c:	f7fd fcf0 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003320:	bf00      	nop
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40013800 	.word	0x40013800
 800332c:	40021000 	.word	0x40021000
 8003330:	40010800 	.word	0x40010800

08003334 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8003344:	e7fe      	b.n	8003344 <HardFault_Handler+0x4>

08003346 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800334a:	e7fe      	b.n	800334a <MemManage_Handler+0x4>

0800334c <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8003350:	e7fe      	b.n	8003350 <BusFault_Handler+0x4>

08003352 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8003356:	e7fe      	b.n	8003356 <UsageFault_Handler+0x4>

08003358 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8003380:	f7fc ff2a 	bl	80001d8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}

08003388 <EXTI1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line1 interrupt.
 */
void EXTI1_IRQHandler(void) {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)
 800338c:	2102      	movs	r1, #2
 800338e:	480d      	ldr	r0, [pc, #52]	; (80033c4 <EXTI1_IRQHandler+0x3c>)
 8003390:	f7fd fe10 	bl	8000fb4 <HAL_GPIO_ReadPin>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10f      	bne.n	80033ba <EXTI1_IRQHandler+0x32>
				== 0&& (HAL_GetTick() - tin_A1) > debouncing_time) {
 800339a:	f7fc ff2f 	bl	80001fc <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <EXTI1_IRQHandler+0x40>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2bc8      	cmp	r3, #200	; 0xc8
 80033a8:	d907      	bls.n	80033ba <EXTI1_IRQHandler+0x32>
			tin_A1 = HAL_GetTick();
 80033aa:	f7fc ff27 	bl	80001fc <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <EXTI1_IRQHandler+0x40>)
 80033b2:	601a      	str	r2, [r3, #0]

			// caso PA1 seja pressionado, muda modo de edicao de hora para 1
			modo_edicao_hora = 1;
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <EXTI1_IRQHandler+0x44>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80033ba:	2002      	movs	r0, #2
 80033bc:	f7fd fe2a 	bl	8001014 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */

	/* USER CODE END EXTI1_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40010800 	.word	0x40010800
 80033c8:	20000058 	.word	0x20000058
 80033cc:	200000e8 	.word	0x200000e8

080033d0 <EXTI2_IRQHandler>:

/**
 * @brief This function handles EXTI line2 interrupt.
 */
void EXTI2_IRQHandler(void) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI2_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)
 80033d4:	2104      	movs	r1, #4
 80033d6:	4816      	ldr	r0, [pc, #88]	; (8003430 <EXTI2_IRQHandler+0x60>)
 80033d8:	f7fd fdec 	bl	8000fb4 <HAL_GPIO_ReadPin>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d121      	bne.n	8003426 <EXTI2_IRQHandler+0x56>
			== 0&& (HAL_GetTick() - tin_A2) > debouncing_time) {
 80033e2:	f7fc ff0b 	bl	80001fc <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <EXTI2_IRQHandler+0x64>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2bc8      	cmp	r3, #200	; 0xc8
 80033f0:	d919      	bls.n	8003426 <EXTI2_IRQHandler+0x56>
		tin_A2 = HAL_GetTick();
 80033f2:	f7fc ff03 	bl	80001fc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <EXTI2_IRQHandler+0x64>)
 80033fa:	601a      	str	r2, [r3, #0]

		// caso PA2 seja pressionado, muda o modo de operecao para editar relogio

		switch (modo_oper_programa) {
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <EXTI2_IRQHandler+0x68>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d008      	beq.n	8003416 <EXTI2_IRQHandler+0x46>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d302      	bcc.n	800340e <EXTI2_IRQHandler+0x3e>
 8003408:	2b02      	cmp	r3, #2
 800340a:	d008      	beq.n	800341e <EXTI2_IRQHandler+0x4e>
 800340c:	e00b      	b.n	8003426 <EXTI2_IRQHandler+0x56>
		case 0: // relogio
			modo_oper_programa = 1;
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <EXTI2_IRQHandler+0x68>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
			break;
 8003414:	e007      	b.n	8003426 <EXTI2_IRQHandler+0x56>
		case 1: // editar relogio hora
			modo_oper_programa = 2;
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <EXTI2_IRQHandler+0x68>)
 8003418:	2202      	movs	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
			break;
 800341c:	e003      	b.n	8003426 <EXTI2_IRQHandler+0x56>
		case 2: // editar relogio min
			modo_oper_programa = 0;
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <EXTI2_IRQHandler+0x68>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
			break;
 8003424:	bf00      	nop
		}

	}
	/* USER CODE END EXTI2_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003426:	2004      	movs	r0, #4
 8003428:	f7fd fdf4 	bl	8001014 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI2_IRQn 1 */

	/* USER CODE END EXTI2_IRQn 1 */
}
 800342c:	bf00      	nop
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40010800 	.word	0x40010800
 8003434:	2000005c 	.word	0x2000005c
 8003438:	200000e4 	.word	0x200000e4

0800343c <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI3_IRQn 0 */
	// se PA3=0 é porque o pino foi ativado para LOW
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 8003440:	2108      	movs	r1, #8
 8003442:	481f      	ldr	r0, [pc, #124]	; (80034c0 <EXTI3_IRQHandler+0x84>)
 8003444:	f7fd fdb6 	bl	8000fb4 <HAL_GPIO_ReadPin>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d132      	bne.n	80034b4 <EXTI3_IRQHandler+0x78>
			== 0&& (HAL_GetTick() - tin_A3) > debouncing_time) {
 800344e:	f7fc fed5 	bl	80001fc <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <EXTI3_IRQHandler+0x88>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2bc8      	cmp	r3, #200	; 0xc8
 800345c:	d92a      	bls.n	80034b4 <EXTI3_IRQHandler+0x78>
		tin_A3 = HAL_GetTick();
 800345e:	f7fc fecd 	bl	80001fc <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <EXTI3_IRQHandler+0x88>)
 8003466:	601a      	str	r2, [r3, #0]

		// caso PA3 seja pressionado, muda modo de operacao

		switch (modo_oper_programa) {
 8003468:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <EXTI3_IRQHandler+0x8c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d821      	bhi.n	80034b4 <EXTI3_IRQHandler+0x78>
 8003470:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <EXTI3_IRQHandler+0x3c>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	0800348d 	.word	0x0800348d
 800347c:	08003495 	.word	0x08003495
 8003480:	0800349d 	.word	0x0800349d
 8003484:	080034a5 	.word	0x080034a5
 8003488:	080034ad 	.word	0x080034ad
		case 0: // relogio
			modo_oper_programa = 3;
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <EXTI3_IRQHandler+0x8c>)
 800348e:	2203      	movs	r2, #3
 8003490:	601a      	str	r2, [r3, #0]
			break;
 8003492:	e00f      	b.n	80034b4 <EXTI3_IRQHandler+0x78>
		case 1: // editar relogio hora
			modo_oper_programa = 3;
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <EXTI3_IRQHandler+0x8c>)
 8003496:	2203      	movs	r2, #3
 8003498:	601a      	str	r2, [r3, #0]
			break;
 800349a:	e00b      	b.n	80034b4 <EXTI3_IRQHandler+0x78>
		case 2: // editar relogio min
			modo_oper_programa = 3;
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <EXTI3_IRQHandler+0x8c>)
 800349e:	2203      	movs	r2, #3
 80034a0:	601a      	str	r2, [r3, #0]
			break;
 80034a2:	e007      	b.n	80034b4 <EXTI3_IRQHandler+0x78>
		case 3: // conversor
			modo_oper_programa = 4;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <EXTI3_IRQHandler+0x8c>)
 80034a6:	2204      	movs	r2, #4
 80034a8:	601a      	str	r2, [r3, #0]
			break;
 80034aa:	e003      	b.n	80034b4 <EXTI3_IRQHandler+0x78>
		case 4: // uart
			modo_oper_programa = 0;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <EXTI3_IRQHandler+0x8c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
			break;
 80034b2:	bf00      	nop
		}
	}
	/* USER CODE END EXTI3_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80034b4:	2008      	movs	r0, #8
 80034b6:	f7fd fdad 	bl	8001014 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI3_IRQn 1 */

	/* USER CODE END EXTI3_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40010800 	.word	0x40010800
 80034c4:	20000060 	.word	0x20000060
 80034c8:	200000e4 	.word	0x200000e4

080034cc <ADC1_2_IRQHandler>:

/**
 * @brief This function handles ADC1 and ADC2 global interrupts.
 */
void ADC1_2_IRQHandler(void) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_2_IRQn 0 */

	/* USER CODE END ADC1_2_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <ADC1_2_IRQHandler+0x10>)
 80034d2:	f7fd f837 	bl	8000544 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC1_2_IRQn 1 */

	/* USER CODE END ADC1_2_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000070 	.word	0x20000070

080034e0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <USART1_IRQHandler+0x10>)
 80034e6:	f7fe fb6f 	bl	8001bc8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200000a0 	.word	0x200000a0

080034f4 <reset_modo_oper_programa>:

/* USER CODE BEGIN 1 */
void reset_modo_oper_programa(void) {
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
// OBS: seção crítica, desabilitamos todas as IRQs p/ atualizar var
	__disable_irq(); // desabilita IRQs
	modo_oper_programa = 0; // set com 0
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <reset_modo_oper_programa+0x18>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003500:	b662      	cpsie	i
	__enable_irq(); // volta habilitar IRQs
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	200000e4 	.word	0x200000e4

08003510 <get_modo_oper_programa>:

int get_modo_oper_programa(void) {
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
	static int x;
	__disable_irq(); // desabilita IRQs
	x = modo_oper_programa; // faz x = modo_oper
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <get_modo_oper_programa+0x20>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <get_modo_oper_programa+0x24>)
 800351e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003520:	b662      	cpsie	i
	__enable_irq(); // volta habilitar IRQs
	return x; // retorna x (=modo_oper)
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <get_modo_oper_programa+0x24>)
 8003524:	681b      	ldr	r3, [r3, #0]
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	200000e4 	.word	0x200000e4
 8003534:	20000064 	.word	0x20000064

08003538 <get_modo_edicao_hora>:

int get_modo_edicao_hora(void) {
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800353c:	b672      	cpsid	i
	static int x;
	__disable_irq(); // desabilita IRQs
	x = modo_edicao_hora; // faz x = modo_oper
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <get_modo_edicao_hora+0x20>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <get_modo_edicao_hora+0x24>)
 8003546:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003548:	b662      	cpsie	i
	__enable_irq(); // volta habilitar IRQs
	return x; // retorna x (=modo_oper)
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <get_modo_edicao_hora+0x24>)
 800354c:	681b      	ldr	r3, [r3, #0]
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	200000e8 	.word	0x200000e8
 800355c:	20000068 	.word	0x20000068

08003560 <reset_modo_edicao_hora>:

void reset_modo_edicao_hora(void) {
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003564:	b672      	cpsid	i
// OBS: seção crítica, desabilitamos todas as IRQs p/ atualizar var
	__disable_irq(); // desabilita IRQs
	modo_edicao_hora = 0; // set com 0
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <reset_modo_edicao_hora+0x18>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800356c:	b662      	cpsie	i
	__enable_irq(); // volta habilitar IRQs
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	200000e8 	.word	0x200000e8

0800357c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <SystemInit+0x5c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <SystemInit+0x5c>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <SystemInit+0x5c>)
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	4911      	ldr	r1, [pc, #68]	; (80035d8 <SystemInit+0x5c>)
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <SystemInit+0x60>)
 8003594:	4013      	ands	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <SystemInit+0x5c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <SystemInit+0x5c>)
 800359e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <SystemInit+0x5c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <SystemInit+0x5c>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <SystemInit+0x5c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <SystemInit+0x5c>)
 80035ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80035be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <SystemInit+0x5c>)
 80035c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80035c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <SystemInit+0x64>)
 80035ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40021000 	.word	0x40021000
 80035dc:	f8ff0000 	.word	0xf8ff0000
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80035e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80035e6:	e003      	b.n	80035f0 <LoopCopyDataInit>

080035e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80035ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80035ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80035ee:	3104      	adds	r1, #4

080035f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80035f0:	480a      	ldr	r0, [pc, #40]	; (800361c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80035f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80035f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80035f8:	d3f6      	bcc.n	80035e8 <CopyDataInit>
  ldr r2, =_sbss
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80035fc:	e002      	b.n	8003604 <LoopFillZerobss>

080035fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80035fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003600:	f842 3b04 	str.w	r3, [r2], #4

08003604 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003606:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003608:	d3f9      	bcc.n	80035fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800360a:	f7ff ffb7 	bl	800357c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800360e:	f000 f80f 	bl	8003630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003612:	f7fe fdd7 	bl	80021c4 <main>
  bx lr
 8003616:	4770      	bx	lr
  ldr r3, =_sidata
 8003618:	080036d4 	.word	0x080036d4
  ldr r0, =_sdata
 800361c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003620:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003624:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003628:	200000ec 	.word	0x200000ec

0800362c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800362c:	e7fe      	b.n	800362c <CAN1_RX1_IRQHandler>
	...

08003630 <__libc_init_array>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	2500      	movs	r5, #0
 8003634:	4e0c      	ldr	r6, [pc, #48]	; (8003668 <__libc_init_array+0x38>)
 8003636:	4c0d      	ldr	r4, [pc, #52]	; (800366c <__libc_init_array+0x3c>)
 8003638:	1ba4      	subs	r4, r4, r6
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	42a5      	cmp	r5, r4
 800363e:	d109      	bne.n	8003654 <__libc_init_array+0x24>
 8003640:	f000 f822 	bl	8003688 <_init>
 8003644:	2500      	movs	r5, #0
 8003646:	4e0a      	ldr	r6, [pc, #40]	; (8003670 <__libc_init_array+0x40>)
 8003648:	4c0a      	ldr	r4, [pc, #40]	; (8003674 <__libc_init_array+0x44>)
 800364a:	1ba4      	subs	r4, r4, r6
 800364c:	10a4      	asrs	r4, r4, #2
 800364e:	42a5      	cmp	r5, r4
 8003650:	d105      	bne.n	800365e <__libc_init_array+0x2e>
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003658:	4798      	blx	r3
 800365a:	3501      	adds	r5, #1
 800365c:	e7ee      	b.n	800363c <__libc_init_array+0xc>
 800365e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003662:	4798      	blx	r3
 8003664:	3501      	adds	r5, #1
 8003666:	e7f2      	b.n	800364e <__libc_init_array+0x1e>
 8003668:	080036cc 	.word	0x080036cc
 800366c:	080036cc 	.word	0x080036cc
 8003670:	080036cc 	.word	0x080036cc
 8003674:	080036d0 	.word	0x080036d0

08003678 <memset>:
 8003678:	4603      	mov	r3, r0
 800367a:	4402      	add	r2, r0
 800367c:	4293      	cmp	r3, r2
 800367e:	d100      	bne.n	8003682 <memset+0xa>
 8003680:	4770      	bx	lr
 8003682:	f803 1b01 	strb.w	r1, [r3], #1
 8003686:	e7f9      	b.n	800367c <memset+0x4>

08003688 <_init>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr

08003694 <_fini>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	bf00      	nop
 8003698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369a:	bc08      	pop	{r3}
 800369c:	469e      	mov	lr, r3
 800369e:	4770      	bx	lr
