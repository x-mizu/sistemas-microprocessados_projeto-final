
sistemas-microprocessados_projeto-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e0  080029e0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080029e0  080029e0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e0  080029e0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080029e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000018  08002a00  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002a00  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007de2  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018dc  00000000  00000000  00027e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  00029700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  00029f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013595  00000000  00000000  0002a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007377  00000000  00000000  0003dc3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b81b  00000000  00000000  00044fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b07cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002018  00000000  00000000  000b084c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800299c 	.word	0x0800299c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800299c 	.word	0x0800299c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fc0d 	bl	800097c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fa7c 	bl	8002664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fc25 	bl	80009e6 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fbed 	bl	8000992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000014 	.word	0x20000014
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000044 	.word	0x20000044

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000044 	.word	0x20000044

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f002 fa3a 	bl	80026c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fa81 	bl	800075c <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7b1b      	ldrb	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7d1b      	ldrb	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b1b      	ldrb	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 8000318:	4013      	ands	r3, r2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	429a      	cmp	r2, r3
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	f003 0320 	and.w	r3, r3, #32
 80003d2:	2b20      	cmp	r3, #32
 80003d4:	d140      	bne.n	8000458 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0302 	and.w	r3, r3, #2
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d139      	bne.n	8000458 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e8:	f003 0310 	and.w	r3, r3, #16
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d105      	bne.n	80003fc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000406:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800040a:	d11d      	bne.n	8000448 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000410:	2b00      	cmp	r3, #0
 8000412:	d119      	bne.n	8000448 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f022 0220 	bic.w	r2, r2, #32
 8000422:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000438:	2b00      	cmp	r3, #0
 800043a:	d105      	bne.n	8000448 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000440:	f043 0201 	orr.w	r2, r3, #1
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 f87c 	bl	8000546 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f06f 0212 	mvn.w	r2, #18
 8000456:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000462:	2b80      	cmp	r3, #128	; 0x80
 8000464:	d14f      	bne.n	8000506 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	2b04      	cmp	r3, #4
 8000472:	d148      	bne.n	8000506 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000478:	f003 0310 	and.w	r3, r3, #16
 800047c:	2b00      	cmp	r3, #0
 800047e:	d105      	bne.n	800048c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000496:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800049a:	d012      	beq.n	80004c2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d125      	bne.n	80004f6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80004b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80004b8:	d11d      	bne.n	80004f6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d119      	bne.n	80004f6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	685a      	ldr	r2, [r3, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80004d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d105      	bne.n	80004f6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ee:	f043 0201 	orr.w	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f96a 	bl	80007d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f06f 020c 	mvn.w	r2, #12
 8000504:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000510:	2b40      	cmp	r3, #64	; 0x40
 8000512:	d114      	bne.n	800053e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b01      	cmp	r3, #1
 8000520:	d10d      	bne.n	800053e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f812 	bl	8000558 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f06f 0201 	mvn.w	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
	...

0800056c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000584:	2b01      	cmp	r3, #1
 8000586:	d101      	bne.n	800058c <HAL_ADC_ConfigChannel+0x20>
 8000588:	2302      	movs	r3, #2
 800058a:	e0dc      	b.n	8000746 <HAL_ADC_ConfigChannel+0x1da>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b06      	cmp	r3, #6
 800059a:	d81c      	bhi.n	80005d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	3b05      	subs	r3, #5
 80005ae:	221f      	movs	r2, #31
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4019      	ands	r1, r3
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	3b05      	subs	r3, #5
 80005c8:	fa00 f203 	lsl.w	r2, r0, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
 80005d4:	e03c      	b.n	8000650 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2b0c      	cmp	r3, #12
 80005dc:	d81c      	bhi.n	8000618 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	3b23      	subs	r3, #35	; 0x23
 80005f0:	221f      	movs	r2, #31
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4019      	ands	r1, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	3b23      	subs	r3, #35	; 0x23
 800060a:	fa00 f203 	lsl.w	r2, r0, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	430a      	orrs	r2, r1
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
 8000616:	e01b      	b.n	8000650 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	3b41      	subs	r3, #65	; 0x41
 800062a:	221f      	movs	r2, #31
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4019      	ands	r1, r3
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	3b41      	subs	r3, #65	; 0x41
 8000644:	fa00 f203 	lsl.w	r2, r0, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	430a      	orrs	r2, r1
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b09      	cmp	r3, #9
 8000656:	d91c      	bls.n	8000692 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68d9      	ldr	r1, [r3, #12]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	3b1e      	subs	r3, #30
 800066a:	2207      	movs	r2, #7
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	43db      	mvns	r3, r3
 8000672:	4019      	ands	r1, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	6898      	ldr	r0, [r3, #8]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	3b1e      	subs	r3, #30
 8000684:	fa00 f203 	lsl.w	r2, r0, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	430a      	orrs	r2, r1
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	e019      	b.n	80006c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6919      	ldr	r1, [r3, #16]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	2207      	movs	r2, #7
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4019      	ands	r1, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	6898      	ldr	r0, [r3, #8]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	fa00 f203 	lsl.w	r2, r0, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b10      	cmp	r3, #16
 80006cc:	d003      	beq.n	80006d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80006d2:	2b11      	cmp	r3, #17
 80006d4:	d132      	bne.n	800073c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <HAL_ADC_ConfigChannel+0x1e4>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d125      	bne.n	800072c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d126      	bne.n	800073c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006fc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b10      	cmp	r3, #16
 8000704:	d11a      	bne.n	800073c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <HAL_ADC_ConfigChannel+0x1e8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <HAL_ADC_ConfigChannel+0x1ec>)
 800070c:	fba2 2303 	umull	r2, r3, r2, r3
 8000710:	0c9a      	lsrs	r2, r3, #18
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800071c:	e002      	b.n	8000724 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3b01      	subs	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f9      	bne.n	800071e <HAL_ADC_ConfigChannel+0x1b2>
 800072a:	e007      	b.n	800073c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000730:	f043 0220 	orr.w	r2, r3, #32
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40012400 	.word	0x40012400
 8000754:	20000014 	.word	0x20000014
 8000758:	431bde83 	.word	0x431bde83

0800075c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b01      	cmp	r3, #1
 8000774:	d127      	bne.n	80007c6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f022 0201 	bic.w	r2, r2, #1
 8000784:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000786:	f7ff fd39 	bl	80001fc <HAL_GetTick>
 800078a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800078c:	e014      	b.n	80007b8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800078e:	f7ff fd35 	bl	80001fc <HAL_GetTick>
 8000792:	4602      	mov	r2, r0
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b02      	cmp	r3, #2
 800079a:	d90d      	bls.n	80007b8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a0:	f043 0210 	orr.w	r2, r3, #16
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ac:	f043 0201 	orr.w	r2, r3, #1
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e007      	b.n	80007c8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d0e3      	beq.n	800078e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
	...

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <__NVIC_EnableIRQ+0x34>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf28      	it	cs
 80008f2:	2304      	movcs	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b03      	subs	r3, #3
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	; 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000948:	d301      	bcc.n	800094e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094a:	2301      	movs	r3, #1
 800094c:	e00f      	b.n	800096e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <SysTick_Config+0x40>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000956:	210f      	movs	r1, #15
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f7ff ff90 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SysTick_Config+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <SysTick_Config+0x40>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff2d 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a4:	f7ff ff42 	bl	800082c <__NVIC_GetPriorityGrouping>
 80009a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff ff90 	bl	80008d4 <NVIC_EncodePriority>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff5f 	bl	8000880 <__NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff35 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffa2 	bl	8000938 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d005      	beq.n	8000a22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2204      	movs	r2, #4
 8000a1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	e051      	b.n	8000ac6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 020e 	bic.w	r2, r2, #14
 8000a30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f022 0201 	bic.w	r2, r2, #1
 8000a40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <HAL_DMA_Abort_IT+0xd0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d029      	beq.n	8000aa0 <HAL_DMA_Abort_IT+0xa0>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <HAL_DMA_Abort_IT+0xd4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d022      	beq.n	8000a9c <HAL_DMA_Abort_IT+0x9c>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <HAL_DMA_Abort_IT+0xd8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d01a      	beq.n	8000a96 <HAL_DMA_Abort_IT+0x96>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_DMA_Abort_IT+0xdc>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d012      	beq.n	8000a90 <HAL_DMA_Abort_IT+0x90>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_DMA_Abort_IT+0xe0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d00a      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x8a>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <HAL_DMA_Abort_IT+0xe4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d102      	bne.n	8000a84 <HAL_DMA_Abort_IT+0x84>
 8000a7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a82:	e00e      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a88:	e00b      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8e:	e008      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	e005      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	e002      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	e000      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xa2>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_DMA_Abort_IT+0xe8>)
 8000aa4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	4798      	blx	r3
    } 
  }
  return status;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40020008 	.word	0x40020008
 8000ad4:	4002001c 	.word	0x4002001c
 8000ad8:	40020030 	.word	0x40020030
 8000adc:	40020044 	.word	0x40020044
 8000ae0:	40020058 	.word	0x40020058
 8000ae4:	4002006c 	.word	0x4002006c
 8000ae8:	40020000 	.word	0x40020000

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	e127      	b.n	8000d50 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b00:	2201      	movs	r2, #1
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f040 8116 	bne.w	8000d4a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b12      	cmp	r3, #18
 8000b24:	d034      	beq.n	8000b90 <HAL_GPIO_Init+0xa4>
 8000b26:	2b12      	cmp	r3, #18
 8000b28:	d80d      	bhi.n	8000b46 <HAL_GPIO_Init+0x5a>
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d02b      	beq.n	8000b86 <HAL_GPIO_Init+0x9a>
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d804      	bhi.n	8000b3c <HAL_GPIO_Init+0x50>
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d031      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d01c      	beq.n	8000b74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b3a:	e048      	b.n	8000bce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d043      	beq.n	8000bc8 <HAL_GPIO_Init+0xdc>
 8000b40:	2b11      	cmp	r3, #17
 8000b42:	d01b      	beq.n	8000b7c <HAL_GPIO_Init+0x90>
          break;
 8000b44:	e043      	b.n	8000bce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b46:	4a89      	ldr	r2, [pc, #548]	; (8000d6c <HAL_GPIO_Init+0x280>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d026      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b4c:	4a87      	ldr	r2, [pc, #540]	; (8000d6c <HAL_GPIO_Init+0x280>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d806      	bhi.n	8000b60 <HAL_GPIO_Init+0x74>
 8000b52:	4a87      	ldr	r2, [pc, #540]	; (8000d70 <HAL_GPIO_Init+0x284>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d020      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b58:	4a86      	ldr	r2, [pc, #536]	; (8000d74 <HAL_GPIO_Init+0x288>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d01d      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
          break;
 8000b5e:	e036      	b.n	8000bce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b60:	4a85      	ldr	r2, [pc, #532]	; (8000d78 <HAL_GPIO_Init+0x28c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d019      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b66:	4a85      	ldr	r2, [pc, #532]	; (8000d7c <HAL_GPIO_Init+0x290>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d016      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
 8000b6c:	4a84      	ldr	r2, [pc, #528]	; (8000d80 <HAL_GPIO_Init+0x294>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0xae>
          break;
 8000b72:	e02c      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e028      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	3304      	adds	r3, #4
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e023      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e01e      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	330c      	adds	r3, #12
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e019      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e012      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d105      	bne.n	8000bbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	611a      	str	r2, [r3, #16]
          break;
 8000bba:	e008      	b.n	8000bce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	615a      	str	r2, [r3, #20]
          break;
 8000bc6:	e002      	b.n	8000bce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	2bff      	cmp	r3, #255	; 0xff
 8000bd2:	d801      	bhi.n	8000bd8 <HAL_GPIO_Init+0xec>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	e001      	b.n	8000bdc <HAL_GPIO_Init+0xf0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3304      	adds	r3, #4
 8000bdc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	2bff      	cmp	r3, #255	; 0xff
 8000be2:	d802      	bhi.n	8000bea <HAL_GPIO_Init+0xfe>
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	e002      	b.n	8000bf0 <HAL_GPIO_Init+0x104>
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	3b08      	subs	r3, #8
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	401a      	ands	r2, r3
 8000c02:	6a39      	ldr	r1, [r7, #32]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 8096 	beq.w	8000d4a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1e:	4b59      	ldr	r3, [pc, #356]	; (8000d84 <HAL_GPIO_Init+0x298>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a58      	ldr	r2, [pc, #352]	; (8000d84 <HAL_GPIO_Init+0x298>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <HAL_GPIO_Init+0x298>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c36:	4a54      	ldr	r2, [pc, #336]	; (8000d88 <HAL_GPIO_Init+0x29c>)
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4013      	ands	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4b      	ldr	r2, [pc, #300]	; (8000d8c <HAL_GPIO_Init+0x2a0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0x19e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a4a      	ldr	r2, [pc, #296]	; (8000d90 <HAL_GPIO_Init+0x2a4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d00d      	beq.n	8000c86 <HAL_GPIO_Init+0x19a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a49      	ldr	r2, [pc, #292]	; (8000d94 <HAL_GPIO_Init+0x2a8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d007      	beq.n	8000c82 <HAL_GPIO_Init+0x196>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a48      	ldr	r2, [pc, #288]	; (8000d98 <HAL_GPIO_Init+0x2ac>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_GPIO_Init+0x192>
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	e004      	b.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e002      	b.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8e:	f002 0203 	and.w	r2, r2, #3
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	4093      	lsls	r3, r2
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9c:	493a      	ldr	r1, [pc, #232]	; (8000d88 <HAL_GPIO_Init+0x29c>)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4938      	ldr	r1, [pc, #224]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	4933      	ldr	r1, [pc, #204]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	492e      	ldr	r1, [pc, #184]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4929      	ldr	r1, [pc, #164]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	4924      	ldr	r1, [pc, #144]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	608b      	str	r3, [r1, #8]
 8000d12:	e006      	b.n	8000d22 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	491f      	ldr	r1, [pc, #124]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	491a      	ldr	r1, [pc, #104]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60cb      	str	r3, [r1, #12]
 8000d3a:	e006      	b.n	8000d4a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	4915      	ldr	r1, [pc, #84]	; (8000d9c <HAL_GPIO_Init+0x2b0>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f47f aed0 	bne.w	8000b00 <HAL_GPIO_Init+0x14>
  }
}
 8000d60:	bf00      	nop
 8000d62:	372c      	adds	r7, #44	; 0x2c
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	10210000 	.word	0x10210000
 8000d70:	10110000 	.word	0x10110000
 8000d74:	10120000 	.word	0x10120000
 8000d78:	10310000 	.word	0x10310000
 8000d7c:	10320000 	.word	0x10320000
 8000d80:	10220000 	.word	0x10220000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	40011000 	.word	0x40011000
 8000d98:	40011400 	.word	0x40011400
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	611a      	str	r2, [r3, #16]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f806 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010400 	.word	0x40010400

08000e00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e26c      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8087 	beq.w	8000f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e34:	4b92      	ldr	r3, [pc, #584]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d00c      	beq.n	8000e5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e40:	4b8f      	ldr	r3, [pc, #572]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d112      	bne.n	8000e72 <HAL_RCC_OscConfig+0x5e>
 8000e4c:	4b8c      	ldr	r3, [pc, #560]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e58:	d10b      	bne.n	8000e72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5a:	4b89      	ldr	r3, [pc, #548]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d06c      	beq.n	8000f40 <HAL_RCC_OscConfig+0x12c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d168      	bne.n	8000f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e246      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x76>
 8000e7c:	4b80      	ldr	r3, [pc, #512]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a7f      	ldr	r2, [pc, #508]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e02e      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x98>
 8000e92:	4b7b      	ldr	r3, [pc, #492]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a7a      	ldr	r2, [pc, #488]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	4b78      	ldr	r3, [pc, #480]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a77      	ldr	r2, [pc, #476]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e01d      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0xbc>
 8000eb6:	4b72      	ldr	r3, [pc, #456]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a71      	ldr	r2, [pc, #452]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b6f      	ldr	r3, [pc, #444]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a6e      	ldr	r2, [pc, #440]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e00b      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000ed0:	4b6b      	ldr	r3, [pc, #428]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a6a      	ldr	r2, [pc, #424]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b68      	ldr	r3, [pc, #416]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a67      	ldr	r2, [pc, #412]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff f984 	bl	80001fc <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff f980 	bl	80001fc <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e1fa      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xe4>
 8000f16:	e014      	b.n	8000f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff f970 	bl	80001fc <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff f96c 	bl	80001fc <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e1e6      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f32:	4b53      	ldr	r3, [pc, #332]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f0      	bne.n	8000f20 <HAL_RCC_OscConfig+0x10c>
 8000f3e:	e000      	b.n	8000f42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d063      	beq.n	8001016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f4e:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00b      	beq.n	8000f72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f5a:	4b49      	ldr	r3, [pc, #292]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d11c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x18c>
 8000f66:	4b46      	ldr	r3, [pc, #280]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d116      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	4b43      	ldr	r3, [pc, #268]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <HAL_RCC_OscConfig+0x176>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d001      	beq.n	8000f8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e1ba      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4939      	ldr	r1, [pc, #228]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9e:	e03a      	b.n	8001016 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d020      	beq.n	8000fea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff f925 	bl	80001fc <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb6:	f7ff f921 	bl	80001fc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e19b      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	4927      	ldr	r1, [pc, #156]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
 8000fe8:	e015      	b.n	8001016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff f904 	bl	80001fc <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff8:	f7ff f900 	bl	80001fc <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e17a      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	2b00      	cmp	r3, #0
 8001020:	d03a      	beq.n	8001098 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d019      	beq.n	800105e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_RCC_OscConfig+0x274>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001030:	f7ff f8e4 	bl	80001fc <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001038:	f7ff f8e0 	bl	80001fc <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e15a      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_RCC_OscConfig+0x26c>)
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f000 fada 	bl	8001610 <RCC_Delay>
 800105c:	e01c      	b.n	8001098 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_RCC_OscConfig+0x274>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001064:	f7ff f8ca 	bl	80001fc <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800106a:	e00f      	b.n	800108c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff f8c6 	bl	80001fc <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d908      	bls.n	800108c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e140      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	42420000 	.word	0x42420000
 8001088:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108c:	4b9e      	ldr	r3, [pc, #632]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e9      	bne.n	800106c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80a6 	beq.w	80011f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010aa:	4b97      	ldr	r3, [pc, #604]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10d      	bne.n	80010d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b94      	ldr	r3, [pc, #592]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a93      	ldr	r2, [pc, #588]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d2:	4b8e      	ldr	r3, [pc, #568]	; (800130c <HAL_RCC_OscConfig+0x4f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d118      	bne.n	8001110 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010de:	4b8b      	ldr	r3, [pc, #556]	; (800130c <HAL_RCC_OscConfig+0x4f8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a8a      	ldr	r2, [pc, #552]	; (800130c <HAL_RCC_OscConfig+0x4f8>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ea:	f7ff f887 	bl	80001fc <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f2:	f7ff f883 	bl	80001fc <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b64      	cmp	r3, #100	; 0x64
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e0fd      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	4b81      	ldr	r3, [pc, #516]	; (800130c <HAL_RCC_OscConfig+0x4f8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x312>
 8001118:	4b7b      	ldr	r3, [pc, #492]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a7a      	ldr	r2, [pc, #488]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	e02d      	b.n	8001182 <HAL_RCC_OscConfig+0x36e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x334>
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a75      	ldr	r2, [pc, #468]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4b73      	ldr	r3, [pc, #460]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a72      	ldr	r2, [pc, #456]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	f023 0304 	bic.w	r3, r3, #4
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	e01c      	b.n	8001182 <HAL_RCC_OscConfig+0x36e>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b05      	cmp	r3, #5
 800114e:	d10c      	bne.n	800116a <HAL_RCC_OscConfig+0x356>
 8001150:	4b6d      	ldr	r3, [pc, #436]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a6c      	ldr	r2, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6213      	str	r3, [r2, #32]
 800115c:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4a69      	ldr	r2, [pc, #420]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6213      	str	r3, [r2, #32]
 8001168:	e00b      	b.n	8001182 <HAL_RCC_OscConfig+0x36e>
 800116a:	4b67      	ldr	r3, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a66      	ldr	r2, [pc, #408]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	6213      	str	r3, [r2, #32]
 8001176:	4b64      	ldr	r3, [pc, #400]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4a63      	ldr	r2, [pc, #396]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	f023 0304 	bic.w	r3, r3, #4
 8001180:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d015      	beq.n	80011b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118a:	f7ff f837 	bl	80001fc <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001190:	e00a      	b.n	80011a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff f833 	bl	80001fc <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e0ab      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a8:	4b57      	ldr	r3, [pc, #348]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0ee      	beq.n	8001192 <HAL_RCC_OscConfig+0x37e>
 80011b4:	e014      	b.n	80011e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff f821 	bl	80001fc <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff f81d 	bl	80001fc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e095      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1ee      	bne.n	80011be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d105      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e6:	4b48      	ldr	r3, [pc, #288]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a47      	ldr	r2, [pc, #284]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8081 	beq.w	80012fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011fc:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b08      	cmp	r3, #8
 8001206:	d061      	beq.n	80012cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d146      	bne.n	800129e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001210:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <HAL_RCC_OscConfig+0x4fc>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7fe fff1 	bl	80001fc <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121e:	f7fe ffed 	bl	80001fc <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e067      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001230:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d108      	bne.n	8001258 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	492d      	ldr	r1, [pc, #180]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a19      	ldr	r1, [r3, #32]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	430b      	orrs	r3, r1
 800126a:	4927      	ldr	r1, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_RCC_OscConfig+0x4fc>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7fe ffc1 	bl	80001fc <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7fe ffbd 	bl	80001fc <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e037      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x46a>
 800129c:	e02f      	b.n	80012fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_RCC_OscConfig+0x4fc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7fe ffaa 	bl	80001fc <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ac:	f7fe ffa6 	bl	80001fc <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e020      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x498>
 80012ca:	e018      	b.n	80012fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e013      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	40007000 	.word	0x40007000
 8001310:	42420060 	.word	0x42420060

08001314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d0      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d910      	bls.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 0207 	bic.w	r2, r3, #7
 800133e:	4965      	ldr	r1, [pc, #404]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0b8      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800137a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001388:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001394:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	494d      	ldr	r1, [pc, #308]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d040      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d115      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e073      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e06b      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f023 0203 	bic.w	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4936      	ldr	r1, [pc, #216]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7fe fefa 	bl	80001fc <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	e00a      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7fe fef6 	bl	80001fc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e053      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 020c 	and.w	r2, r3, #12
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1eb      	bne.n	800140c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d210      	bcs.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 0207 	bic.w	r2, r3, #7
 800144a:	4922      	ldr	r1, [pc, #136]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e032      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4916      	ldr	r1, [pc, #88]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	490e      	ldr	r1, [pc, #56]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a2:	f000 f821 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 80014a6:	4601      	mov	r1, r0
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_RCC_ClockConfig+0x1c8>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	fa21 f303 	lsr.w	r3, r1, r3
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1cc>)
 80014bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1d0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe58 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	080029c8 	.word	0x080029c8
 80014e0:	20000014 	.word	0x20000014
 80014e4:	20000000 	.word	0x20000000

080014e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	b490      	push	{r4, r7}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014f0:	1d3c      	adds	r4, r7, #4
 80014f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_RCC_GetSysClockFreq+0xb4>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d002      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x40>
 8001522:	2b08      	cmp	r3, #8
 8001524:	d003      	beq.n	800152e <HAL_RCC_GetSysClockFreq+0x46>
 8001526:	e02d      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800152a:	623b      	str	r3, [r7, #32]
      break;
 800152c:	e02d      	b.n	800158a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800153a:	4413      	add	r3, r2
 800153c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001540:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	0c5b      	lsrs	r3, r3, #17
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800155a:	4413      	add	r3, r2
 800155c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001560:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001566:	fb02 f203 	mul.w	r2, r2, r3
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
 8001572:	e004      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	623b      	str	r3, [r7, #32]
      break;
 8001582:	e002      	b.n	800158a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001586:	623b      	str	r3, [r7, #32]
      break;
 8001588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800158a:	6a3b      	ldr	r3, [r7, #32]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bc90      	pop	{r4, r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	080029b4 	.word	0x080029b4
 800159c:	080029c4 	.word	0x080029c4
 80015a0:	40021000 	.word	0x40021000
 80015a4:	007a1200 	.word	0x007a1200
 80015a8:	003d0900 	.word	0x003d0900

080015ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_RCC_GetHCLKFreq+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000014 	.word	0x20000014

080015c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015c4:	f7ff fff2 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015c8:	4601      	mov	r1, r0
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	080029d8 	.word	0x080029d8

080015e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015ec:	f7ff ffde 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015f0:	4601      	mov	r1, r0
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	0adb      	lsrs	r3, r3, #11
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_RCC_GetPCLK2Freq+0x24>)
 80015fe:	5cd3      	ldrb	r3, [r2, r3]
 8001600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	080029d8 	.word	0x080029d8

08001610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <RCC_Delay+0x34>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <RCC_Delay+0x38>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0a5b      	lsrs	r3, r3, #9
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800162c:	bf00      	nop
  }
  while (Delay --);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	60fa      	str	r2, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f9      	bne.n	800162c <RCC_Delay+0x1c>
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000014 	.word	0x20000014
 8001648:	10624dd3 	.word	0x10624dd3

0800164c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d07d      	beq.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166c:	4b4f      	ldr	r3, [pc, #316]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10d      	bne.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	4a4b      	ldr	r2, [pc, #300]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	61d3      	str	r3, [r2, #28]
 8001684:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001690:	2301      	movs	r3, #1
 8001692:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d118      	bne.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a0:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a42      	ldr	r2, [pc, #264]	; (80017b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ac:	f7fe fda6 	bl	80001fc <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	e008      	b.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b4:	f7fe fda2 	bl	80001fc <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e06d      	b.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d02e      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d027      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001700:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001706:	4a29      	ldr	r2, [pc, #164]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d014      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7fe fd71 	bl	80001fc <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7fe fd6d 	bl	80001fc <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e036      	b.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ee      	beq.n	800171e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4917      	ldr	r1, [pc, #92]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800174e:	4313      	orrs	r3, r2
 8001750:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	490b      	ldr	r1, [pc, #44]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	4904      	ldr	r1, [pc, #16]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40007000 	.word	0x40007000
 80017b4:	42420440 	.word	0x42420440

080017b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e03f      	b.n	800184a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 ffb6 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2224      	movs	r2, #36	; 0x24
 80017e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fae5 	bl	8001dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2220      	movs	r2, #32
 8001844:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	4613      	mov	r3, r2
 800185e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b20      	cmp	r3, #32
 800186a:	d130      	bne.n	80018ce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <HAL_UART_Transmit_IT+0x26>
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e029      	b.n	80018d0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_UART_Transmit_IT+0x38>
 8001886:	2302      	movs	r3, #2
 8001888:	e022      	b.n	80018d0 <HAL_UART_Transmit_IT+0x7e>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	88fa      	ldrh	r2, [r7, #6]
 80018a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2221      	movs	r2, #33	; 0x21
 80018ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
  }
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	4613      	mov	r3, r2
 80018e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d140      	bne.n	8001976 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_UART_Receive_IT+0x26>
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e039      	b.n	8001978 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_UART_Receive_IT+0x38>
 800190e:	2302      	movs	r3, #2
 8001910:	e032      	b.n	8001978 <HAL_UART_Receive_IT+0x9e>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	88fa      	ldrh	r2, [r7, #6]
 8001924:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	88fa      	ldrh	r2, [r7, #6]
 800192a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2222      	movs	r2, #34	; 0x22
 8001936:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001950:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001976:	2302      	movs	r3, #2
  }
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
	...

08001984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_UART_IRQHandler+0x52>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f003 0320 	and.w	r3, r3, #32
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f97b 	bl	8001cca <UART_Receive_IT>
      return;
 80019d4:	e0cc      	b.n	8001b70 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80ab 	beq.w	8001b34 <HAL_UART_IRQHandler+0x1b0>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_UART_IRQHandler+0x70>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a0 	beq.w	8001b34 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_UART_IRQHandler+0x90>
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <HAL_UART_IRQHandler+0xb0>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2c:	f043 0202 	orr.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <HAL_UART_IRQHandler+0xd0>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	f043 0204 	orr.w	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <HAL_UART_IRQHandler+0xf0>
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	f043 0208 	orr.w	r2, r3, #8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d078      	beq.n	8001b6e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_UART_IRQHandler+0x112>
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f91a 	bl	8001cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf14      	ite	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <HAL_UART_IRQHandler+0x13a>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d031      	beq.n	8001b22 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f865 	bl	8001b8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d023      	beq.n	8001b1a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ae0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d013      	beq.n	8001b12 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_UART_IRQHandler+0x1f4>)
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe ff82 	bl	8000a00 <HAL_DMA_Abort_IT>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d016      	beq.n	8001b30 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b10:	e00e      	b.n	8001b30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f832 	bl	8001b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b18:	e00a      	b.n	8001b30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f82e 	bl	8001b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b20:	e006      	b.n	8001b30 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f82a 	bl	8001b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001b2e:	e01e      	b.n	8001b6e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b30:	bf00      	nop
    return;
 8001b32:	e01c      	b.n	8001b6e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <HAL_UART_IRQHandler+0x1cc>
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f851 	bl	8001bf0 <UART_Transmit_IT>
    return;
 8001b4e:	e00f      	b.n	8001b70 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00a      	beq.n	8001b70 <HAL_UART_IRQHandler+0x1ec>
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f898 	bl	8001c9a <UART_EndTransmit_IT>
    return;
 8001b6a:	bf00      	nop
 8001b6c:	e000      	b.n	8001b70 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001b6e:	bf00      	nop
  }
}
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	08001bc9 	.word	0x08001bc9

08001b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ba4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f7ff ffca 	bl	8001b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b21      	cmp	r3, #33	; 0x21
 8001c02:	d144      	bne.n	8001c8e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0c:	d11a      	bne.n	8001c44 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c22:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	1c9a      	adds	r2, r3, #2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	621a      	str	r2, [r3, #32]
 8001c36:	e00e      	b.n	8001c56 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	621a      	str	r2, [r3, #32]
 8001c42:	e008      	b.n	8001c56 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	1c59      	adds	r1, r3, #1
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6211      	str	r1, [r2, #32]
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4619      	mov	r1, r3
 8001c64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10f      	bne.n	8001c8a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fbe8 	bl	8002490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b22      	cmp	r3, #34	; 0x22
 8001cdc:	d171      	bne.n	8001dc2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce6:	d123      	bne.n	8001d30 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10e      	bne.n	8001d14 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	1c9a      	adds	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
 8001d12:	e029      	b.n	8001d68 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d2e:	e01b      	b.n	8001d68 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10a      	bne.n	8001d4e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6858      	ldr	r0, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	1c59      	adds	r1, r3, #1
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6291      	str	r1, [r2, #40]	; 0x28
 8001d48:	b2c2      	uxtb	r2, r0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e00c      	b.n	8001d68 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	1c58      	adds	r0, r3, #1
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	6288      	str	r0, [r1, #40]	; 0x28
 8001d60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d120      	bne.n	8001dbe <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0220 	bic.w	r2, r2, #32
 8001d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fb75 	bl	80024a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e002      	b.n	8001dc4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e06:	f023 030c 	bic.w	r3, r3, #12
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	68f9      	ldr	r1, [r7, #12]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <UART_SetConfig+0x1ac>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d14e      	bne.n	8001ed2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e34:	f7ff fbd8 	bl	80015e8 <HAL_RCC_GetPCLK2Freq>
 8001e38:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009a      	lsls	r2, r3, #2
 8001e44:	441a      	add	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	4a4a      	ldr	r2, [pc, #296]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	0119      	lsls	r1, r3, #4
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	009a      	lsls	r2, r3, #2
 8001e64:	441a      	add	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e70:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001e72:	fba3 0302 	umull	r0, r3, r3, r2
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2064      	movs	r0, #100	; 0x64
 8001e7a:	fb00 f303 	mul.w	r3, r0, r3
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	3332      	adds	r3, #50	; 0x32
 8001e84:	4a3d      	ldr	r2, [pc, #244]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e90:	4419      	add	r1, r3
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009a      	lsls	r2, r3, #2
 8001e9c:	441a      	add	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea8:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2064      	movs	r0, #100	; 0x64
 8001eb2:	fb00 f303 	mul.w	r3, r0, r3
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	3332      	adds	r3, #50	; 0x32
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	f003 020f 	and.w	r2, r3, #15
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	440a      	add	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001ed0:	e04d      	b.n	8001f6e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ed2:	f7ff fb75 	bl	80015c0 <HAL_RCC_GetPCLK1Freq>
 8001ed6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	009a      	lsls	r2, r3, #2
 8001ee2:	441a      	add	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	0119      	lsls	r1, r3, #4
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	009a      	lsls	r2, r3, #2
 8001f02:	441a      	add	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001f10:	fba3 0302 	umull	r0, r3, r3, r2
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	2064      	movs	r0, #100	; 0x64
 8001f18:	fb00 f303 	mul.w	r3, r0, r3
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	3332      	adds	r3, #50	; 0x32
 8001f22:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f2e:	4419      	add	r1, r3
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009a      	lsls	r2, r3, #2
 8001f3a:	441a      	add	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001f48:	fba3 0302 	umull	r0, r3, r3, r2
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	2064      	movs	r0, #100	; 0x64
 8001f50:	fb00 f303 	mul.w	r3, r0, r3
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	3332      	adds	r3, #50	; 0x32
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <UART_SetConfig+0x1b0>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	51eb851f 	.word	0x51eb851f

08001f80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f86:	f7fe f8e1 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f8a:	f000 f93d 	bl	8002208 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f8e:	f000 fa23 	bl	80023d8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001f92:	f000 f9b9 	bl	8002308 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001f96:	f000 f9f5 	bl	8002384 <MX_USART1_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001f9a:	f000 f990 	bl	80022be <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, buffIn, sizeof(buffIn)); // inicializa buffer de entrada
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	498d      	ldr	r1, [pc, #564]	; (80021d8 <main+0x258>)
 8001fa2:	488e      	ldr	r0, [pc, #568]	; (80021dc <main+0x25c>)
 8001fa4:	f7ff fc99 	bl	80018da <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOB,
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f24f 0120 	movw	r1, #61472	; 0xf020
 8001fae:	488c      	ldr	r0, [pc, #560]	; (80021e0 <main+0x260>)
 8001fb0:	f7fe fef6 	bl	8000da0 <HAL_GPIO_WritePin>
	static enum {
		INI_D4, LIG_D4, DSLG_D4
	} sttD4 = INI_D4; // var estados de D4

	// para controlar vars tempos de entrada na rotina ON/OFF de cada LED
	uint32_t tin_D1 = 0, tin_D2 = 0, tin_D3 = 0, tin_D4 = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]

	// para controlar as vezes que uma requisicao sera feita
	uint32_t tin_UART = 0, timeOut_UART = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/// Conexao UART -------------------------------------------------------
		if (statusPrograma == ConexaoUART) {
 8001fcc:	4b85      	ldr	r3, [pc, #532]	; (80021e4 <main+0x264>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	f040 80fa 	bne.w	80021ca <main+0x24a>
			switch (statusUart) {
 8001fd6:	4b84      	ldr	r3, [pc, #528]	; (80021e8 <main+0x268>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d8f6      	bhi.n	8001fcc <main+0x4c>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <main+0x64>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	0800201b 	.word	0x0800201b
 8001fe8:	08001ff5 	.word	0x08001ff5
 8001fec:	080020b9 	.word	0x080020b9
 8001ff0:	08002141 	.word	0x08002141
			case Idle:
				tin_UART = HAL_GetTick();
 8001ff4:	f7fe f902 	bl	80001fc <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]
				timeOut_UART = HAL_GetTick();
 8001ffa:	f7fe f8ff 	bl	80001fc <HAL_GetTick>
 8001ffe:	60b8      	str	r0, [r7, #8]
				respostaRecebida = false;
 8002000:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <main+0x26c>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
				requisicaoEnviada = false;
 8002006:	4b7a      	ldr	r3, [pc, #488]	; (80021f0 <main+0x270>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
				requisicaoTimeOutEnviada = false;
 800200c:	4b79      	ldr	r3, [pc, #484]	; (80021f4 <main+0x274>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
				statusUart = TransmitirReq;
 8002012:	4b75      	ldr	r3, [pc, #468]	; (80021e8 <main+0x268>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
				break;
 8002018:	e0dc      	b.n	80021d4 <main+0x254>
			case TransmitirReq: // se o status for de enviar uma requisicao

				if ((HAL_GetTick() - tin_UART)
 800201a:	f7fe f8ef 	bl	80001fc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
						> tempoRequiscoes && requisicaoEnviada == false) { // se for tempo de fazer uma requisicao
 8002024:	4a74      	ldr	r2, [pc, #464]	; (80021f8 <main+0x278>)
 8002026:	8812      	ldrh	r2, [r2, #0]
				if ((HAL_GetTick() - tin_UART)
 8002028:	4293      	cmp	r3, r2
 800202a:	d912      	bls.n	8002052 <main+0xd2>
						> tempoRequiscoes && requisicaoEnviada == false) { // se for tempo de fazer uma requisicao
 800202c:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <main+0x270>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <main+0xd2>
					tin_UART = HAL_GetTick();
 800203c:	f7fe f8de 	bl	80001fc <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]
					timeOut_UART = HAL_GetTick();
 8002042:	f7fe f8db 	bl	80001fc <HAL_GetTick>
 8002046:	60b8      	str	r0, [r7, #8]
					requisicaoEnviada = true;
 8002048:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <main+0x270>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
					TransmitirRequisicaoUART();
 800204e:	f000 faaf 	bl	80025b0 <TransmitirRequisicaoUART>
				}

				// se deu 500 ms, envia mais uma requisicao
				if ((HAL_GetTick() - timeOut_UART)
 8002052:	f7fe f8d3 	bl	80001fc <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1ad3      	subs	r3, r2, r3
						> tempoRespostaMAX && requisicaoTimeOutEnviada == false) {
 800205c:	4a67      	ldr	r2, [pc, #412]	; (80021fc <main+0x27c>)
 800205e:	8812      	ldrh	r2, [r2, #0]
				if ((HAL_GetTick() - timeOut_UART)
 8002060:	4293      	cmp	r3, r2
 8002062:	d90c      	bls.n	800207e <main+0xfe>
						> tempoRespostaMAX && requisicaoTimeOutEnviada == false) {
 8002064:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <main+0x274>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f083 0301 	eor.w	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <main+0xfe>
					requisicaoTimeOutEnviada = true;
 8002074:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <main+0x274>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
					TransmitirRequisicaoUART();
 800207a:	f000 fa99 	bl	80025b0 <TransmitirRequisicaoUART>
				}

				// se depois da requisicao de 500ms, ainda nao recebi resposta depois de 500ms
				// erro de conexao
				if ((HAL_GetTick() - timeOut_UART) > 2 * tempoRespostaMAX) {
 800207e:	f7fe f8bd 	bl	80001fc <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4a5c      	ldr	r2, [pc, #368]	; (80021fc <main+0x27c>)
 800208a:	8812      	ldrh	r2, [r2, #0]
 800208c:	0052      	lsls	r2, r2, #1
 800208e:	4293      	cmp	r3, r2
 8002090:	d902      	bls.n	8002098 <main+0x118>
					statusUart = ErroConexao;
 8002092:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <main+0x268>)
 8002094:	2203      	movs	r2, #3
 8002096:	701a      	strb	r2, [r3, #0]
				}

				// recebi resposta, reseta variaveis de requisicao
				if (respostaRecebida == true) {
 8002098:	4b54      	ldr	r3, [pc, #336]	; (80021ec <main+0x26c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8097 	beq.w	80021d2 <main+0x252>
					requisicaoTimeOutEnviada = false;
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <main+0x274>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
					requisicaoEnviada = false;
 80020aa:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <main+0x270>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
					respostaRecebida = false;
 80020b0:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <main+0x26c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
				}

				break;
 80020b6:	e08c      	b.n	80021d2 <main+0x252>
			case ErroCheckSum: // se o status for de erro de checksum pisca LED 3
				switch (sttD3) {
 80020b8:	4b51      	ldr	r3, [pc, #324]	; (8002200 <main+0x280>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d011      	beq.n	80020e4 <main+0x164>
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d024      	beq.n	800210e <main+0x18e>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d000      	beq.n	80020ca <main+0x14a>
						sttD3 = LIG_D3; // muda o prox estado da máquina
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_5, GPIO_PIN_SET); // desl LED
					}
					break;
				}
				break;
 80020c8:	e084      	b.n	80021d4 <main+0x254>
					tin_D3 = HAL_GetTick(); // tempo inicial que iniciou a tarefa
 80020ca:	f7fe f897 	bl	80001fc <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]
					sttD3 = LIG_D3; // prox estado da máquina
 80020d0:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <main+0x280>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_5, GPIO_PIN_SET); // desl o LED
 80020d6:	2201      	movs	r2, #1
 80020d8:	f242 0120 	movw	r1, #8224	; 0x2020
 80020dc:	4840      	ldr	r0, [pc, #256]	; (80021e0 <main+0x260>)
 80020de:	f7fe fe5f 	bl	8000da0 <HAL_GPIO_WritePin>
					break;
 80020e2:	e02c      	b.n	800213e <main+0x1be>
					if ((HAL_GetTick() - tin_D3) > DT_D) // se for hora de ligar o led
 80020e4:	f7fe f88a 	bl	80001fc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020f2:	d921      	bls.n	8002138 <main+0x1b8>
						tin_D3 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 80020f4:	f7fe f882 	bl	80001fc <HAL_GetTick>
 80020f8:	6178      	str	r0, [r7, #20]
						sttD3 = DSLG_D3; // muda o prox estado da máquina
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <main+0x280>)
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_5, GPIO_PIN_RESET); // ligaLED
 8002100:	2200      	movs	r2, #0
 8002102:	f242 0120 	movw	r1, #8224	; 0x2020
 8002106:	4836      	ldr	r0, [pc, #216]	; (80021e0 <main+0x260>)
 8002108:	f7fe fe4a 	bl	8000da0 <HAL_GPIO_WritePin>
					break;
 800210c:	e014      	b.n	8002138 <main+0x1b8>
					if ((HAL_GetTick() - tin_D3) > DT_D) // se for hora de desligar o led
 800210e:	f7fe f875 	bl	80001fc <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800211c:	d90e      	bls.n	800213c <main+0x1bc>
						tin_D3 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 800211e:	f7fe f86d 	bl	80001fc <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]
						sttD3 = LIG_D3; // muda o prox estado da máquina
 8002124:	4b36      	ldr	r3, [pc, #216]	; (8002200 <main+0x280>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_5, GPIO_PIN_SET); // desl LED
 800212a:	2201      	movs	r2, #1
 800212c:	f242 0120 	movw	r1, #8224	; 0x2020
 8002130:	482b      	ldr	r0, [pc, #172]	; (80021e0 <main+0x260>)
 8002132:	f7fe fe35 	bl	8000da0 <HAL_GPIO_WritePin>
					break;
 8002136:	e001      	b.n	800213c <main+0x1bc>
					break;
 8002138:	bf00      	nop
 800213a:	e04b      	b.n	80021d4 <main+0x254>
					break;
 800213c:	bf00      	nop
				break;
 800213e:	e049      	b.n	80021d4 <main+0x254>
			case ErroConexao: // se o status for de erro de conexao pisca LED 4
				switch (sttD4) {
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <main+0x284>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d011      	beq.n	800216c <main+0x1ec>
 8002148:	2b02      	cmp	r3, #2
 800214a:	d024      	beq.n	8002196 <main+0x216>
 800214c:	2b00      	cmp	r3, #0
 800214e:	d000      	beq.n	8002152 <main+0x1d2>
						sttD4 = LIG_D4; // muda o prox estado da máquina
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_5, GPIO_PIN_SET); // desl LED
					}
					break;
				}
				break;
 8002150:	e040      	b.n	80021d4 <main+0x254>
					tin_D4 = HAL_GetTick(); // tempo inicial que iniciou a tarefa
 8002152:	f7fe f853 	bl	80001fc <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]
					sttD4 = LIG_D4; // prox estado da máquina
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <main+0x284>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_5, GPIO_PIN_SET); // desl o LED
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002164:	481e      	ldr	r0, [pc, #120]	; (80021e0 <main+0x260>)
 8002166:	f7fe fe1b 	bl	8000da0 <HAL_GPIO_WritePin>
					break;
 800216a:	e02c      	b.n	80021c6 <main+0x246>
					if ((HAL_GetTick() - tin_D4) > DT_D) // se for hora de ligar o led
 800216c:	f7fe f846 	bl	80001fc <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800217a:	d921      	bls.n	80021c0 <main+0x240>
						tin_D4 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 800217c:	f7fe f83e 	bl	80001fc <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]
						sttD4 = DSLG_D4; // muda o prox estado da máquina
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <main+0x284>)
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_5, GPIO_PIN_RESET); // ligaLED
 8002188:	2200      	movs	r2, #0
 800218a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800218e:	4814      	ldr	r0, [pc, #80]	; (80021e0 <main+0x260>)
 8002190:	f7fe fe06 	bl	8000da0 <HAL_GPIO_WritePin>
					break;
 8002194:	e014      	b.n	80021c0 <main+0x240>
					if ((HAL_GetTick() - tin_D4) > DT_D) // se for hora de desligar o led
 8002196:	f7fe f831 	bl	80001fc <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021a4:	d90e      	bls.n	80021c4 <main+0x244>
						tin_D4 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 80021a6:	f7fe f829 	bl	80001fc <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]
						sttD4 = LIG_D4; // muda o prox estado da máquina
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <main+0x284>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_5, GPIO_PIN_SET); // desl LED
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80021b8:	4809      	ldr	r0, [pc, #36]	; (80021e0 <main+0x260>)
 80021ba:	f7fe fdf1 	bl	8000da0 <HAL_GPIO_WritePin>
					break;
 80021be:	e001      	b.n	80021c4 <main+0x244>
					break;
 80021c0:	bf00      	nop
 80021c2:	e000      	b.n	80021c6 <main+0x246>
					break;
 80021c4:	bf00      	nop
				break;
 80021c6:	bf00      	nop
 80021c8:	e004      	b.n	80021d4 <main+0x254>
			}
		} else {
			statusUart = Idle;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <main+0x268>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e6fc      	b.n	8001fcc <main+0x4c>
				break;
 80021d2:	bf00      	nop
		if (statusPrograma == ConexaoUART) {
 80021d4:	e6fa      	b.n	8001fcc <main+0x4c>
 80021d6:	bf00      	nop
 80021d8:	20000038 	.word	0x20000038
 80021dc:	20000078 	.word	0x20000078
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	20000011 	.word	0x20000011
 80021e8:	20000010 	.word	0x20000010
 80021ec:	2000003c 	.word	0x2000003c
 80021f0:	2000003d 	.word	0x2000003d
 80021f4:	2000003e 	.word	0x2000003e
 80021f8:	2000000e 	.word	0x2000000e
 80021fc:	2000000c 	.word	0x2000000c
 8002200:	2000003f 	.word	0x2000003f
 8002204:	20000040 	.word	0x20000040

08002208 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b094      	sub	sp, #80	; 0x50
 800220c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800220e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002212:	2228      	movs	r2, #40	; 0x28
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fbb8 	bl	800298c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002238:	2301      	movs	r3, #1
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800223c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002246:	2301      	movs	r3, #1
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224a:	2302      	movs	r3, #2
 800224c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800224e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800225a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fdd8 	bl	8000e14 <HAL_RCC_OscConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SystemClock_Config+0x66>
		Error_Handler();
 800226a:	f000 f9f5 	bl	8002658 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800226e:	230f      	movs	r3, #15
 8002270:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800227a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2102      	movs	r1, #2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f842 	bl	8001314 <HAL_RCC_ClockConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x92>
		Error_Handler();
 8002296:	f000 f9df 	bl	8002658 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800229a:	2302      	movs	r3, #2
 800229c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f9d0 	bl	800164c <HAL_RCCEx_PeriphCLKConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xae>
		Error_Handler();
 80022b2:	f000 f9d1 	bl	8002658 <Error_Handler>
	}
}
 80022b6:	bf00      	nop
 80022b8:	3750      	adds	r7, #80	; 0x50
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
	/* EXTI1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	2007      	movs	r0, #7
 80022c8:	f7fe fb63 	bl	8000992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022cc:	2007      	movs	r0, #7
 80022ce:	f7fe fb7c 	bl	80009ca <HAL_NVIC_EnableIRQ>
	/* EXTI2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	2008      	movs	r0, #8
 80022d8:	f7fe fb5b 	bl	8000992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80022dc:	2008      	movs	r0, #8
 80022de:	f7fe fb74 	bl	80009ca <HAL_NVIC_EnableIRQ>
	/* EXTI3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	2009      	movs	r0, #9
 80022e8:	f7fe fb53 	bl	8000992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022ec:	2009      	movs	r0, #9
 80022ee:	f7fe fb6c 	bl	80009ca <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2025      	movs	r0, #37	; 0x25
 80022f8:	f7fe fb4b 	bl	8000992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022fc:	2025      	movs	r0, #37	; 0x25
 80022fe:	f7fe fb64 	bl	80009ca <HAL_NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_ADC1_Init+0x74>)
 800231a:	4a19      	ldr	r2, [pc, #100]	; (8002380 <MX_ADC1_Init+0x78>)
 800231c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <MX_ADC1_Init+0x74>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_ADC1_Init+0x74>)
 8002326:	2200      	movs	r2, #0
 8002328:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <MX_ADC1_Init+0x74>)
 800232c:	2200      	movs	r2, #0
 800232e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <MX_ADC1_Init+0x74>)
 8002332:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002336:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_ADC1_Init+0x74>)
 800233a:	2200      	movs	r2, #0
 800233c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <MX_ADC1_Init+0x74>)
 8002340:	2201      	movs	r2, #1
 8002342:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <MX_ADC1_Init+0x74>)
 8002346:	f7fd ff63 	bl	8000210 <HAL_ADC_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8002350:	f000 f982 	bl	8002658 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002358:	2301      	movs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_ADC1_Init+0x74>)
 8002366:	f7fe f901 	bl	800056c <HAL_ADC_ConfigChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8002370:	f000 f972 	bl	8002658 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000048 	.word	0x20000048
 8002380:	40012400 	.word	0x40012400

08002384 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <MX_USART1_UART_Init+0x50>)
 800238c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 8002390:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002394:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023aa:	220c      	movs	r2, #12
 80023ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023bc:	f7ff f9fc 	bl	80017b8 <HAL_UART_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80023c6:	f000 f947 	bl	8002658 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000078 	.word	0x20000078
 80023d4:	40013800 	.word	0x40013800

080023d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <MX_GPIO_Init+0xa8>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a23      	ldr	r2, [pc, #140]	; (8002480 <MX_GPIO_Init+0xa8>)
 80023f2:	f043 0320 	orr.w	r3, r3, #32
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <MX_GPIO_Init+0xa8>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <MX_GPIO_Init+0xa8>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <MX_GPIO_Init+0xa8>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_GPIO_Init+0xa8>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_GPIO_Init+0xa8>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4a17      	ldr	r2, [pc, #92]	; (8002480 <MX_GPIO_Init+0xa8>)
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	6193      	str	r3, [r2, #24]
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_GPIO_Init+0xa8>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002434:	2200      	movs	r2, #0
 8002436:	f24f 6160 	movw	r1, #63072	; 0xf660
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <MX_GPIO_Init+0xac>)
 800243c:	f7fe fcb0 	bl	8000da0 <HAL_GPIO_WritePin>
			GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
					| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA1 PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8002440:	230e      	movs	r3, #14
 8002442:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <MX_GPIO_Init+0xb0>)
 8002446:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	4619      	mov	r1, r3
 8002452:	480e      	ldr	r0, [pc, #56]	; (800248c <MX_GPIO_Init+0xb4>)
 8002454:	f7fe fb4a 	bl	8000aec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 PB13 PB14
	 PB15 PB5 PB6 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8002458:	f24f 6360 	movw	r3, #63072	; 0xf660
 800245c:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_15 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2302      	movs	r3, #2
 8002468:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	4619      	mov	r1, r3
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <MX_GPIO_Init+0xac>)
 8002472:	f7fe fb3b 	bl	8000aec <HAL_GPIO_Init>

}
 8002476:	bf00      	nop
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	40010c00 	.word	0x40010c00
 8002488:	10210000 	.word	0x10210000
 800248c:	40010800 	.word	0x40010800

08002490 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
	}
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a36      	ldr	r2, [pc, #216]	; (800258c <HAL_UART_RxCpltCallback+0xe8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d166      	bne.n	8002584 <HAL_UART_RxCpltCallback+0xe0>

		if (buffIn[0] == r && buffIn[1] == r && buffIn[2] == r
 80024b6:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_UART_RxCpltCallback+0xf0>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d117      	bne.n	80024f4 <HAL_UART_RxCpltCallback+0x50>
 80024c4:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_UART_RxCpltCallback+0xf0>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d110      	bne.n	80024f4 <HAL_UART_RxCpltCallback+0x50>
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 80024d4:	789b      	ldrb	r3, [r3, #2]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_UART_RxCpltCallback+0xf0>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d109      	bne.n	80024f4 <HAL_UART_RxCpltCallback+0x50>
				&& buffIn[3] == r) { // caso seja uma requisição de dados
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 80024e2:	78db      	ldrb	r3, [r3, #3]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_UART_RxCpltCallback+0xf0>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d102      	bne.n	80024f4 <HAL_UART_RxCpltCallback+0x50>

			TransmitirDadosUART();
 80024ee:	f000 f87f 	bl	80025f0 <TransmitirDadosUART>
 80024f2:	e042      	b.n	800257a <HAL_UART_RxCpltCallback+0xd6>

		} else { // senao eu estou recebendo um dado
			uint16_t checkSumCalculado = (uint16_t) buffIn[0] + buffIn[1]; // faz a soma da parte alta com a baixa
 80024f4:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 80024fe:	785b      	ldrb	r3, [r3, #1]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	b29b      	uxth	r3, r3
 8002504:	4413      	add	r3, r2
 8002506:	81fb      	strh	r3, [r7, #14]
			uint16_t checkSumRecebido = ((uint16_t) buffIn[2] << 8) | buffIn[3]; // monta o checksum recebido
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 800250a:	789b      	ldrb	r3, [r3, #2]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	b21a      	sxth	r2, r3
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 8002514:	78db      	ldrb	r3, [r3, #3]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	b21b      	sxth	r3, r3
 800251a:	4313      	orrs	r3, r2
 800251c:	b21b      	sxth	r3, r3
 800251e:	81bb      	strh	r3, [r7, #12]

			respostaRecebida = true; // recebi uma resposta
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_UART_RxCpltCallback+0xf4>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]

			if (checkSumCalculado == checkSumRecebido) { // se o checksum for correto
 8002526:	89fa      	ldrh	r2, [r7, #14]
 8002528:	89bb      	ldrh	r3, [r7, #12]
 800252a:	429a      	cmp	r2, r3
 800252c:	d111      	bne.n	8002552 <HAL_UART_RxCpltCallback+0xae>
				// salva valor recebido em uma variavel de 16 bits
				valorConversorRecebido = ((uint16_t) buffIn[0] << 8)
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	021b      	lsls	r3, r3, #8
						| buffIn[1];
 8002536:	b21a      	sxth	r2, r3
 8002538:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	b21b      	sxth	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	b21b      	sxth	r3, r3
 8002544:	b29a      	uxth	r2, r3
				valorConversorRecebido = ((uint16_t) buffIn[0] << 8)
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_UART_RxCpltCallback+0xf8>)
 8002548:	801a      	strh	r2, [r3, #0]

				requisicaoAtual = 1; // reseta variavel de requisicao para 1
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_UART_RxCpltCallback+0xfc>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e013      	b.n	800257a <HAL_UART_RxCpltCallback+0xd6>

			} else { // se o valor recebido nao for o correto, envia outra requisicao
				requisicaoAtual++; // incremente numero da requisicao
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_UART_RxCpltCallback+0xfc>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3301      	adds	r3, #1
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_UART_RxCpltCallback+0xfc>)
 800255e:	701a      	strb	r2, [r3, #0]
				if (requisicaoAtual > requisicoesCheckSumIncorretoMAX) { // se ja foi enviado 3 requisicoes
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_UART_RxCpltCallback+0xfc>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_UART_RxCpltCallback+0x100>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d905      	bls.n	800257a <HAL_UART_RxCpltCallback+0xd6>
					statusUart = ErroCheckSum; // atribui status de erro
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_UART_RxCpltCallback+0x104>)
 8002570:	2202      	movs	r2, #2
 8002572:	701a      	strb	r2, [r3, #0]
					requisicaoAtual = 1;
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_UART_RxCpltCallback+0xfc>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		HAL_UART_Receive_IT(&huart1, buffIn, sizeof(buffIn)); // inicializa buffer de entrada
 800257a:	2204      	movs	r2, #4
 800257c:	4904      	ldr	r1, [pc, #16]	; (8002590 <HAL_UART_RxCpltCallback+0xec>)
 800257e:	480b      	ldr	r0, [pc, #44]	; (80025ac <HAL_UART_RxCpltCallback+0x108>)
 8002580:	f7ff f9ab 	bl	80018da <HAL_UART_Receive_IT>
	}
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40013800 	.word	0x40013800
 8002590:	20000038 	.word	0x20000038
 8002594:	20000008 	.word	0x20000008
 8002598:	2000003c 	.word	0x2000003c
 800259c:	200000b8 	.word	0x200000b8
 80025a0:	2000000a 	.word	0x2000000a
 80025a4:	20000009 	.word	0x20000009
 80025a8:	20000010 	.word	0x20000010
 80025ac:	20000078 	.word	0x20000078

080025b0 <TransmitirRequisicaoUART>:

void TransmitirRequisicaoUART(void) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
// prepara requisicao
	buffOut[0] = r;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <TransmitirRequisicaoUART+0x34>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <TransmitirRequisicaoUART+0x38>)
 80025ba:	701a      	strb	r2, [r3, #0]
	buffOut[1] = r;
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <TransmitirRequisicaoUART+0x34>)
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <TransmitirRequisicaoUART+0x38>)
 80025c2:	705a      	strb	r2, [r3, #1]
	buffOut[2] = r;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <TransmitirRequisicaoUART+0x34>)
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <TransmitirRequisicaoUART+0x38>)
 80025ca:	709a      	strb	r2, [r3, #2]
	buffOut[3] = r;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <TransmitirRequisicaoUART+0x34>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <TransmitirRequisicaoUART+0x38>)
 80025d2:	70da      	strb	r2, [r3, #3]

	HAL_UART_Transmit_IT(&huart1, buffOut, sizeof(buffOut)); // envia requisicao
 80025d4:	2204      	movs	r2, #4
 80025d6:	4904      	ldr	r1, [pc, #16]	; (80025e8 <TransmitirRequisicaoUART+0x38>)
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <TransmitirRequisicaoUART+0x3c>)
 80025da:	f7ff f93a 	bl	8001852 <HAL_UART_Transmit_IT>
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000008 	.word	0x20000008
 80025e8:	20000034 	.word	0x20000034
 80025ec:	20000078 	.word	0x20000078

080025f0 <TransmitirDadosUART>:

void TransmitirDadosUART(void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
	buffOut[1] = (uint8_t) 0xFF & valorConversor;
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <TransmitirDadosUART+0x5c>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <TransmitirDadosUART+0x60>)
 8002600:	705a      	strb	r2, [r3, #1]
	buffOut[0] = (uint8_t) 0xFF & (valorConversor >> 8);
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <TransmitirDadosUART+0x5c>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	b29b      	uxth	r3, r3
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <TransmitirDadosUART+0x60>)
 8002610:	701a      	strb	r2, [r3, #0]
	uint16_t checkSum = (uint16_t) buffOut[0] + buffOut[1];
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <TransmitirDadosUART+0x60>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <TransmitirDadosUART+0x60>)
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	b29b      	uxth	r3, r3
 8002622:	4413      	add	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]

	buffOut[3] = (uint8_t) 0xFF & checkSum;
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <TransmitirDadosUART+0x60>)
 800262c:	70da      	strb	r2, [r3, #3]
	buffOut[2] = (uint8_t) 0xFF & (checkSum >> 8);
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	b29b      	uxth	r3, r3
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <TransmitirDadosUART+0x60>)
 8002638:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, buffOut, sizeof(buffOut)); // envia requisicao
 800263a:	2204      	movs	r2, #4
 800263c:	4904      	ldr	r1, [pc, #16]	; (8002650 <TransmitirDadosUART+0x60>)
 800263e:	4805      	ldr	r0, [pc, #20]	; (8002654 <TransmitirDadosUART+0x64>)
 8002640:	f7ff f907 	bl	8001852 <HAL_UART_Transmit_IT>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000006 	.word	0x20000006
 8002650:	20000034 	.word	0x20000034
 8002654:	20000078 	.word	0x20000078

08002658 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <HAL_MspInit+0x5c>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <HAL_MspInit+0x5c>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6193      	str	r3, [r2, #24]
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_MspInit+0x5c>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_MspInit+0x5c>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_MspInit+0x5c>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	61d3      	str	r3, [r2, #28]
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_MspInit+0x5c>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_MspInit+0x60>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_MspInit+0x60>)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000

080026c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_ADC_MspInit+0x7c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d129      	bne.n	800273c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_ADC_MspInit+0x80>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_ADC_MspInit+0x80>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_ADC_MspInit+0x80>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_ADC_MspInit+0x80>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_ADC_MspInit+0x80>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6193      	str	r3, [r2, #24]
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_ADC_MspInit+0x80>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002718:	2301      	movs	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271c:	2303      	movs	r3, #3
 800271e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4619      	mov	r1, r3
 8002726:	4809      	ldr	r0, [pc, #36]	; (800274c <HAL_ADC_MspInit+0x84>)
 8002728:	f7fe f9e0 	bl	8000aec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	2012      	movs	r0, #18
 8002732:	f7fe f92e 	bl	8000992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002736:	2012      	movs	r0, #18
 8002738:	f7fe f947 	bl	80009ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40012400 	.word	0x40012400
 8002748:	40021000 	.word	0x40021000
 800274c:	40010800 	.word	0x40010800

08002750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_UART_MspInit+0x8c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d131      	bne.n	80027d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_UART_MspInit+0x90>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_UART_MspInit+0x90>)
 8002776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_UART_MspInit+0x90>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_UART_MspInit+0x90>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_UART_MspInit+0x90>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_UART_MspInit+0x90>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4619      	mov	r1, r3
 80027b4:	480b      	ldr	r0, [pc, #44]	; (80027e4 <HAL_UART_MspInit+0x94>)
 80027b6:	f7fe f999 	bl	8000aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4619      	mov	r1, r3
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <HAL_UART_MspInit+0x94>)
 80027d0:	f7fe f98c 	bl	8000aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010800 	.word	0x40010800

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <HardFault_Handler+0x4>

080027fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <MemManage_Handler+0x4>

08002800 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <BusFault_Handler+0x4>

08002806 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280a:	e7fe      	b.n	800280a <UsageFault_Handler+0x4>

0800280c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f7fd fcd0 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002840:	2002      	movs	r0, #2
 8002842:	f7fe fac5 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}

0800284a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800284e:	2004      	movs	r0, #4
 8002850:	f7fe fabe 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800285c:	2008      	movs	r0, #8
 800285e:	f7fe fab7 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <ADC1_2_IRQHandler+0x10>)
 800286e:	f7fd fda7 	bl	80003c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000048 	.word	0x20000048

0800287c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <USART1_IRQHandler+0x10>)
 8002882:	f7ff f87f 	bl	8001984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000078 	.word	0x20000078

08002890 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <SystemInit+0x5c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <SystemInit+0x5c>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <SystemInit+0x5c>)
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	4911      	ldr	r1, [pc, #68]	; (80028ec <SystemInit+0x5c>)
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <SystemInit+0x60>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <SystemInit+0x5c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <SystemInit+0x5c>)
 80028b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <SystemInit+0x5c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SystemInit+0x5c>)
 80028c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <SystemInit+0x5c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <SystemInit+0x5c>)
 80028ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80028d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SystemInit+0x5c>)
 80028d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <SystemInit+0x64>)
 80028de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40021000 	.word	0x40021000
 80028f0:	f8ff0000 	.word	0xf8ff0000
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80028f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80028fa:	e003      	b.n	8002904 <LoopCopyDataInit>

080028fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80028fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002900:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002902:	3104      	adds	r1, #4

08002904 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002904:	480a      	ldr	r0, [pc, #40]	; (8002930 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002908:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800290a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800290c:	d3f6      	bcc.n	80028fc <CopyDataInit>
  ldr r2, =_sbss
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002910:	e002      	b.n	8002918 <LoopFillZerobss>

08002912 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002914:	f842 3b04 	str.w	r3, [r2], #4

08002918 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800291a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800291c:	d3f9      	bcc.n	8002912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800291e:	f7ff ffb7 	bl	8002890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002922:	f000 f80f 	bl	8002944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002926:	f7ff fb2b 	bl	8001f80 <main>
  bx lr
 800292a:	4770      	bx	lr
  ldr r3, =_sidata
 800292c:	080029e8 	.word	0x080029e8
  ldr r0, =_sdata
 8002930:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002934:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8002938:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 800293c:	200000bc 	.word	0x200000bc

08002940 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002940:	e7fe      	b.n	8002940 <CAN1_RX1_IRQHandler>
	...

08002944 <__libc_init_array>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	2500      	movs	r5, #0
 8002948:	4e0c      	ldr	r6, [pc, #48]	; (800297c <__libc_init_array+0x38>)
 800294a:	4c0d      	ldr	r4, [pc, #52]	; (8002980 <__libc_init_array+0x3c>)
 800294c:	1ba4      	subs	r4, r4, r6
 800294e:	10a4      	asrs	r4, r4, #2
 8002950:	42a5      	cmp	r5, r4
 8002952:	d109      	bne.n	8002968 <__libc_init_array+0x24>
 8002954:	f000 f822 	bl	800299c <_init>
 8002958:	2500      	movs	r5, #0
 800295a:	4e0a      	ldr	r6, [pc, #40]	; (8002984 <__libc_init_array+0x40>)
 800295c:	4c0a      	ldr	r4, [pc, #40]	; (8002988 <__libc_init_array+0x44>)
 800295e:	1ba4      	subs	r4, r4, r6
 8002960:	10a4      	asrs	r4, r4, #2
 8002962:	42a5      	cmp	r5, r4
 8002964:	d105      	bne.n	8002972 <__libc_init_array+0x2e>
 8002966:	bd70      	pop	{r4, r5, r6, pc}
 8002968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800296c:	4798      	blx	r3
 800296e:	3501      	adds	r5, #1
 8002970:	e7ee      	b.n	8002950 <__libc_init_array+0xc>
 8002972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002976:	4798      	blx	r3
 8002978:	3501      	adds	r5, #1
 800297a:	e7f2      	b.n	8002962 <__libc_init_array+0x1e>
 800297c:	080029e0 	.word	0x080029e0
 8002980:	080029e0 	.word	0x080029e0
 8002984:	080029e0 	.word	0x080029e0
 8002988:	080029e4 	.word	0x080029e4

0800298c <memset>:
 800298c:	4603      	mov	r3, r0
 800298e:	4402      	add	r2, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	d100      	bne.n	8002996 <memset+0xa>
 8002994:	4770      	bx	lr
 8002996:	f803 1b01 	strb.w	r1, [r3], #1
 800299a:	e7f9      	b.n	8002990 <memset+0x4>

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
